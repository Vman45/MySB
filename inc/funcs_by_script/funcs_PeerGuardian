#!/bin/bash
# shellcheck disable=SC1001,SC2001
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
{ [ -z "${vars}" ] || [ "${vars}" -ne 1 ]; } && {
    echo "Please load 'vars' file before..."
    exit 0
}
##################### FIRST LINE #####################################

gfnIblocklistXmlGenerate() {
    # https://www.vpnmentor.com/blog/torrents-illegal-update-country/

    local sLine sListId sUrlInfo sUrlList sListName sNewLine nComment sListNameLower sValues
    local sOriginalXmlFile sMysbSqlFile sP2pArtisanFile
    sOriginalXmlFile="/tmp/lists.xml"
    sMysbSqlFile="/tmp/mysb.sql"
    sP2pArtisanFile="/tmp/p2partisan.txt"

    ${binCURL} -o "${sOriginalXmlFile}" https://www.iblocklist.com/lists.xml
    rm -f "${sMysbSqlFile}" "${sP2pArtisanFile}"
    [ "${1}" == "p2partisan" ] && nHeaderGlobal=1 || nHeaderGlobal=0
    [ "${1}" == "p2partisan" ] && nHeaderCountries=1 || nHeaderCountries=0

    while read -r sLine; do
        [ "${sLine}" == "<lists>" ] && continue
        [ "${sLine}" == "</lists>" ] && continue
        [ "${sLine}" == "<list>" ] && continue
        [ "${sLine}" == "</list>" ] && continue

        if (echo "${sLine}" | grep -q '<list>'); then
            sListId="$(echo "${sLine}" | sed 's/<list>//g;s/<\/list>//g;')"
            sUrlInfo="https://www.iblocklist.com/list?list=${sListId}"
            sUrlList="http://list.iblocklist.com/?list=${sListId}&fileformat=p2p&archiveformat=gz"
        fi

        (echo "${sLine}" | grep -q '<name>') && sListName="$(echo "${sLine}" | sed 's/<name>//g;s/<\/name>//g;')"
        (echo "${sLine}" | grep -q '<author>') && sAuthor="$(echo "${sLine}" | sed 's/<author>//g;s/<\/author>//g;')"
        (echo "${sLine}" | grep -q '<subscription>') && sSubscription="$(echo "${sLine}" | sed 's/<subscription>//g;s/<\/subscription>//g;')"
        [ -n "${sAuthor}" ] && sNewLine[0]="${sAuthor}"
        if [ -n "${sListName}" ]; then
            sListNameLower="$(echo "${sListName}" | tr '[:upper:]' '[:lower:]')"
            sNewLine[1]="$(echo "${sListName}" | sed "s/'/\\\'/g;")"
            nComment=""
            case "${sListNameLower}" in
                'cruzit' | 'malc0de' | 'zeus' | 'badpeers' | 'level1' | 'level2' | 'microsoft' | 'rangetest' | 'pedophiles')
                    sValues="1, 1"
                    sEnable=""
                    [ "${sListNameLower}" == "cruzit" ] && nComment="DDOS attacks"
                    [ "${sListNameLower}" == "malc0de" ] && nComment="Malware"
                    [ "${sListNameLower}" == "level1" ] && nComment="Anti-p2p activity"
                    [ "${sListNameLower}" == "level2" ] && nComment="Ranges used by labs or researshers"
                    [ "${sListNameLower}" == "zeus" ] && nComment="Anti-p2p activity"
                    [ "${sListNameLower}" == "badpeers" ] && nComment="Bad deeds in P2P"
                    [ "${sListNameLower}" == "microsoft" ] && nComment="Microsoft"
                    [ "${sListNameLower}" == "rangetest" ] && nComment="Anti-p2p activity suspected"
                    ;;
                'china' | 'russia' | 'australia' | 'united states' | 'portugal' | 'italy' | 'south africa' | 'malaysia' | 'latvia')
                    # Countries that have shut down torrenting sites
                    sValues="1, 1"
                    sEnable=""
                    ;;
                'germany' | 'japan' | 'united kingdom' | 'finland' | 'united arab emirates')
                    # Countries where downloading illegal content in fined
                    sValues="1, 1"
                    sEnable=""
                    ;;
                'p2p allow')
                    # P2P allow, disable it for MySB compatibilities
                    continue
                    ;;
                *)
                    sValues="0, 0"
                    sEnable="# "
                    ;;
            esac
        fi
        if [ -n "${sListId}" ]; then
            sNewLine[2]="${sListId}"
            [ "${#sListId}" -eq 2 ] && nComment="Country"
        fi
        [ -n "${sUrlInfo}" ] && sNewLine[3]="${sUrlInfo}"
        [ -n "${sUrlList}" ] && sNewLine[4]="${sUrlList}"
        [ -n "${sSubscription}" ] && sNewLine[5]="${sSubscription}"

        case "${sSubscription}" in
            'true')
                sValues="0, 0"
                sEnable="# "
                nComment="Subscription required"
                ;;
        esac

        (echo "${sLine}" | grep -q '<featured>') && {
            if [ "${1}" == "p2partisan" ]; then
                if [ "${nHeaderGlobal}" -eq 1 ]; then
                    {
                        echo "###########################################################################"
                        echo "# Generic lists, additional available e.g. at the following providers:"
                        echo "# https://www.iblocklist.com/lists.php"
                        echo "# http://iplists.firehol.org/"
                        echo "# https://www.spamhaus.org/drop/"
                        echo "###########################################################################"
                        echo "# The 2 formats supported are:"
                        echo "# Type A:"
                        echo '# .gz cointaining ASCII i nthe format "description:SIP-DIP"'
                        echo "# Type B:"
                        echo "# ASCII cointainting X.X.X.X or X.X.X.X/YY, any optional trailer define by a"
                        echo '# semicolon e.g. ";description" is ignored'
                        echo "#"
                        echo "# NOTE: enable with caution, with too many lists you might run of RAM on your router!"
                        echo "#"
                        echo
                        echo "##################################################################################"
                        echo "# NOTE: enable with caution, with too many lists you might run of RAM on your router!"
                        echo '# Every enabled list must honour the format: "name URL"'
                        echo "##################################################################################"
                        nHeaderGlobal=0
                    } >>"${sP2pArtisanFile}"
                fi
                if [ "${nComment}" == "Country" ] && [ "${nHeaderCountries}" -eq 1 ]; then
                    {
                        echo
                        echo "# Country lists available here"
                        echo "# http://www.iblocklist.com/lists.php?category=country"
                        echo "# Browse the URL above and pick up the list you want to block (if any)"
                        echo "# e.g. Aruba"
                        nHeaderCountries=0
                    } >>"${sP2pArtisanFile}"
                fi
                sFormatedName="$(echo "${sNewLine[1]// /_}" | sed 's/\.//g;s/\\//g;s/[()]//g;' | sed "s/'/_/g;")"
                [ "${sSubscription}" != "true" ] && echo "${sEnable}${sFormatedName} ${sNewLine[4]}" | tee -a "${sP2pArtisanFile}"
            else
                echo "(\"${sNewLine[0]}\", \"${sNewLine[1]}\", \"${sNewLine[2]}\", \"${sNewLine[3]}\", \"${sNewLine[4]}\", \"${sNewLine[5]}\", ${sValues}, \"${nComment}\", \"0000-00-00 00:00:00\"),"
                echo "(\"${sNewLine[0]}\", \"${sNewLine[1]}\", \"${sNewLine[2]}\", \"${sNewLine[3]}\", \"${sNewLine[4]}\", \"${sNewLine[5]}\", ${sValues}, \"${nComment}\", \"0000-00-00 00:00:00\")," >>"${sMysbSqlFile}"
            fi
            unset sNewLine
        }
    done <"${sOriginalXmlFile}"
}

#### If PeerGuardian is failing
gfnPeerGuardianFailed() {
    local sUser

    gfnListCountUsers 'normal'

    for sUser in ${gsUsersList}; do
        log_daemon_msg "${Funcs_PeerGuardianFailed_Switching} ${1}" "${sUser}"
        case "${1}" in
            "rTorrent")
                if [ ! -f "${MySB_InstallDir}"/files/blocklists/blocklist_rtorrent.txt ]; then
                    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/scripts/BlocklistsRTorrent.bsh" 'REFRESH'
                fi

                if [ -f "${MySB_InstallDir}"/files/blocklists/blocklist_rtorrent.txt ] && [ -d /home/"${sUser}"/blocklist/ ]; then
                    cp "${MySB_InstallDir}"/files/blocklists/* /home/"${sUser}"/blocklist/
                fi

                if [ -f /home/"${sUser}"/.rtorrent.rc ]; then
                    perl -pi -e "s/^#ipv4_filter.load/ipv4_filter.load/g" /home/"${sUser}"/.rtorrent.rc
                    perl -pi -e "s/^#print/print/g" /home/"${sUser}"/.rtorrent.rc

                    if (systemctl status rtorrent-"${sUser}" >/dev/null); then
                        gfnStatusLSB 0
                        systemctl restart rtorrent-"${sUser}"
                    else
                        gfnStatusLSB 0
                    fi
                else
                    gfnStatusLSB 0
                fi
                ;;
            "PeerGuardian")
                if [ -f /home/"${sUser}"/.rtorrent.rc ]; then
                    if (grep -q '^ipv4_filter.load' /home/"${sUser}"/.rtorrent.rc); then
                        perl -pi -e "s/^ipv4_filter.load/#ipv4_filter.load/g" /home/"${sUser}"/.rtorrent.rc
                        perl -pi -e "s/^print/#print/g" /home/"${sUser}"/.rtorrent.rc

                        if (systemctl status rtorrent-"${sUser}" >/dev/null); then
                            gfnStatusLSB 0
                            systemctl restart rtorrent-"${sUser}"
                        else
                            gfnStatusLSB 0
                        fi
                    else
                        gfnStatusLSB 0
                    fi
                else
                    gfnStatusLSB 0
                fi
                ;;
        esac
    done
}

#### PeerGuardian Create blocklists.list
gfnPeerGuardianBlocklistsList() {
    local sAllBlocklists sBlocklist sIblocklistIdent sUsername sPin bDisplay sMode
    bDisplay="${1}"
    sMode="${2}"

    function fnManageTypeLists() {
        local bDisplayFn bVerbose dDateHour aUpdateIdList nCount nPersonal nIBlockList
        local sModeFn sListFn sUpdateId sFailedList sCheckLog sLine sUpdateIdList sDbToUpdate
        bDisplayFn="${1}"
        sModeFn="${2}"
        bVerbose=""
        aAllBlocklists=()
        aUpdateIdList=()
        nPersonal=0
        nIBlockList=0

        sIblocklistIdent="$(sqlite3 -cmd '.timeout 150000' "${gsblocklists_DB}" "SELECT username,pin FROM iblocklist_ident WHERE id='1';")"
        sUsername="$(echo "${sIblocklistIdent}" | awk '{split($0,a,"|"); print a[1]}')"
        sPin="$(echo "${sIblocklistIdent}" | awk '{split($0,a,"|"); print a[2]}')"

        sAllBlocklists="$(sqlite3 -cmd '.timeout 150000' "${gsblocklists_DB}" "SELECT list_url,update_id FROM blocklists WHERE list_url != '' AND enable = '1' ORDER BY list_url ASC;" | sed 's/\t/|/g;')"
        for sBlocklist in ${sAllBlocklists}; do
            aAllBlocklists+=("${gsblocklists_DB}|${sBlocklist}")
            ((nPersonal++))
        done
        sAllBlocklists="$(cmdMySQL 'MySB_db' "SELECT list_url,update_id,subscription FROM blocklists WHERE list_url != '' AND enable = '1'  ORDER BY list_url ASC;" | sed 's/\t/|/g;')"
        for sBlocklist in ${sAllBlocklists}; do
            aAllBlocklists+=("MySB_db|${sBlocklist}")
            ((nIBlockList++))
        done

        case "${sModeFn}" in
            'UpdateLists')
                # Backup current list
                cp /etc/pgl/blocklists.list /etc/pgl/blocklists.backup

                # Cleaning
                rm -f "${MySB_InstallDir}/temp/pglcmd_update.log"
                rm -f "${MySB_InstallDir}/temp/pglcmd_update_new.log"
                rm -f "${MySB_InstallDir}/temp/blocklists.list"

                # 1/ Creating of active lists file
                for sBlocklist in "${aAllBlocklists[@]}"; do
                    sDbToUpdate="$(echo "${sBlocklist}" | awk '{split($0,a,"|"); print a[1]}')"
                    sListFn="$(echo "${sBlocklist}" | awk '{split($0,a,"|"); print a[2]}')"
                    echo "${sDbToUpdate}|${sListFn}" >>"${MySB_InstallDir}/temp/blocklists.list"
                done

                # 2/ Doing update of this lists with a clean log file
                mv -f /var/log/pgl/pglcmd.log /var/log/pgl/pglcmd.log.backup
                if (! pglcmd update >>"${MySB_InstallDir}/temp/pglcmd_update.log"); then
                    cp /etc/pgl/blocklists.backup /etc/pgl/blocklists.list
                    sed -i '/^#/d' /etc/pgl/blocklists.list
                    sed -i '/^$/d' /etc/pgl/blocklists.list
                    cmdMySQL "${gsblocklists_DB}" "UPDATE blocklists SET enable='0' WHERE 1;" ${bVerbose}
                    cmdMySQL 'MySB_db' "UPDATE blocklists SET enable='0' WHERE 1;" ${bVerbose}
                    while read -r sLine; do
                        if [ -n "$(cmdMySQL 'MySB_db' "SELECT id_blocklists FROM blocklists WHERE list_url='${sLine}';")" ]; then
                            sDbToUpdate="MySB_db"
                        else
                            sDbToUpdate="${gsblocklists_DB}"
                        fi
                        cmdMySQL "${sDbToUpdate}" "UPDATE blocklists SET enable='1' WHERE list_url='${sLine}';" ${bVerbose}
                    done </etc/pgl/blocklists.list
                    # Force update with current validated lists
                    pglcmd restart
                    rm -f /var/log/pgl/pglcmd.log
                    rm -f "${MySB_InstallDir}/temp/pglcmd_update.log"
                    pglcmd update >>"${MySB_InstallDir}/temp/pglcmd_update.log"
                fi

                # 3/ Generating formated update result log
                while read -r sLine; do
                    if (grep -q '&amp' <<<"${sLine}"); then
                        echo -n "${sLine}" >>"${MySB_InstallDir}/temp/pglcmd_update_new.log"
                        perl -pi -e "s/&amp/&/g" "${MySB_InstallDir}/temp/pglcmd_update_new.log"
                    else
                        echo "${sLine}" >>"${MySB_InstallDir}/temp/pglcmd_update_new.log"
                    fi
                done <"${MySB_InstallDir}/temp/pglcmd_update.log"

                # 4/ Generating array of update_id list
                # while read -r sLine; do
                #     if (grep -q 'last modified:' <<<"${sLine}"); then
                #         sUpdateId="$(echo "${sLine}" | awk '{ print $1 }')"
                #         if [ "${bDisplayFn}" -eq 0 ]; then
                #             echo "$(date +"%T") --> Update ID: ${sUpdateId}" >>"${MySB_InstallDir}/logs/${gsScriptName}.log"
                #             bVerbose=""
                #         else
                #             echo "$(date +"%T") --> Update ID: ${sUpdateId}"
                #             bVerbose="-v"
                #         fi
                #         aUpdateIdList+=("${sUpdateId}")
                #     fi
                # done <"${MySB_InstallDir}/temp/pglcmd_update_new.log"
                sUpdateIdList="$(grep 'Extracting ' /var/log/pgl/pglcmd.log | cut -d ',' -f 1 | awk '{ print $2 }')"
                for sUpdateId in ${sUpdateIdList}; do
                    if [ "${bDisplayFn}" -eq 0 ]; then
                        echo "Update ID: ${sUpdateId}" >>"${MySB_InstallDir}/logs/${gsScriptName}.log"
                        bVerbose=""
                    else
                        echo "Update ID: ${sUpdateId}"
                        bVerbose="-v"
                    fi
                    aUpdateIdList+=("${sUpdateId}")
                done

                # 5/ Update update_id in database
                if [ "${#aUpdateIdList[@]}" -gt 0 ]; then
                    nCount=0
                    while read -r sLine; do
                        sDbToUpdate="$(echo "${sLine}" | awk '{split($0,a,"|"); print a[1]}')"
                        sListFn="$(echo "${sLine}" | awk '{split($0,a,"|"); print a[2]}')"
                        [ "${bDisplayFn}" -eq 0 ] && bVerbose="" || bVerbose="-v"
                        cmdMySQL "${sDbToUpdate}" "UPDATE blocklists SET update_id='${aUpdateIdList[${nCount}]}' WHERE list_url='${sListFn}';" ${bVerbose}
                        ((nCount++))
                    done <"${MySB_InstallDir}/temp/blocklists.list"
                fi

                # 6/ Update time in database
                if [ "${#aUpdateIdList[@]}" -gt 0 ]; then
                    nCount=0
                    grep 'last modified:' "${MySB_InstallDir}/temp/pglcmd_update_new.log" | sed 's/)/:00/g;' | while read -r sLine; do
                        dDateHour="$(echo "${sLine}" | sed 's/modified:/#/g;' | cut -d "#" -f 2 | sed 's/^ //g;')"
                        sUpdateId="$(echo "${sLine}" | awk '{ print $1 }')"

                        if [ -n "${sLine}" ]; then
                            [ "${bDisplayFn}" -eq 0 ] && bVerbose="" || bVerbose="-v"

                            if [ -n "$(cmdMySQL 'MySB_db' "SELECT id_blocklists FROM blocklists WHERE update_id='${sUpdateId}';")" ]; then
                                sDbToUpdate="MySB_db"
                            else
                                sDbToUpdate="${gsblocklists_DB}"
                            fi
                            cmdMySQL "${sDbToUpdate}" "UPDATE blocklists SET lastupdate='${dDateHour}' WHERE update_id='${sUpdateId}';" ${bVerbose}
                        fi
                        ((nCount++))
                    done
                fi

                # 7/ Check failed update
                if [ "${#aUpdateIdList[@]}" -gt 0 ]; then
                    sCheckLog="$(grep 'failed' /var/log/pgl/pglcmd.log | grep 'list.iblocklist.com' | awk '{ print $6 }')"
                    for sFailedList in ${sCheckLog}; do
                        if [ "${bDisplayFn}" -eq 0 ]; then
                            echo "$(date +"%T") --> '${sFailedList}' will be disabled." >>"${MySB_InstallDir}/logs/${gsScriptName}.log"
                            bVerbose=""
                        else
                            echo "$(date +"%T") --> '${sFailedList}' will be disabled."
                            bVerbose="-v"
                        fi

                        # Force inactived list
                        cmdMySQL "${sDbToUpdate}" "UPDATE blocklists SET enable='0' WHERE list_url='${sFailedList}';" ${bVerbose}
                    done
                fi

                cat /var/log/pgl/pglcmd.log >>/var/log/pgl/pglcmd.log.backup
                mv -f /var/log/pgl/pglcmd.log "${MySB_InstallDir}/temp/pglcmd.log"
                mv -f /var/log/pgl/pglcmd.log.backup /var/log/pgl/pglcmd.log
                ;;
            'CreateFile') # Now, we create the final blocklists with all active lists
                for sBlocklist in "${aAllBlocklists[@]}"; do
                    sListFn="$(echo "${sBlocklist}" | awk '{split($0,a,"|"); print a[2]}')"
                    bSubscription="$(echo "${sBlocklist}" | awk '{split($0,a,"|"); print a[4]}')"

                    {
                        [ -n "${sUsername}" ]
                        [ -n "${sPin}" ]
                        [ "${bSubscription}" == "true" ]
                    } && sListFn="${sListFn}&username=${sUsername}&pin=${sPin}"

                    echo "${sListFn}" >>/etc/pgl/blocklists.list
                done
                ;;
        esac
    }

    case "${sMode}" in
        'CreateFile')
            if [ -f /etc/pgl/pglcmd.conf ] && [ -f /etc/pgl/blocklists.list ]; then
                # /etc/pgl/blocklists.list
                [ "${bDisplay}" -eq 1 ] && log_daemon_msg "${Peerguardian_AddingSelectedBlocklist}"
                (
                    cat <<'EOF'
# blocklists.list - lists the remote blocklists that pglcmd handles.

# Place one URL per line for every blocklist.
# Any line which starts with a # (hash) is a comment and is ignored.

# Have a look at /usr/share/doc/pglcmd/README.blocklists.gz for some hints
# about some available blocklist providers. Neither do we recommend any
# blocklist provider, nor do we even know much about them.

# Instead or additionally to the remote blocklists that are specified here, you
# can put local blocklists in LOCAL_BLOCKLIST_DIR (/etc/pgl/blocklists.local/).
# All blocklists in that directory (except those in subdirectories, or which end
# in "~" or start with ".") are used. They may be in any supported format.

# pglcmd unpacks lists that are compressed with gz, zip or 7z for pgld.

# Do a "pglcmd reload" (or "restart" or "update") when you have edited this
# file.

# The following blocklist setting may be useful or not, good or bad. Most
# probably it is outdated:

EOF
                ) >/etc/pgl/blocklists.list

                fnManageTypeLists "${bDisplay}" "CreateFile"

                [ "${bDisplay}" -eq 1 ] && gfnStatusLSB
            fi
            ;;
        'UpdateLists')
            [ "${bDisplay}" -eq 1 ] && log_daemon_msg "${Peerguardian_AddingSelectedBlocklist}"
            fnManageTypeLists "${bDisplay}" "UpdateLists"
            [ "${bDisplay}" -eq 1 ] && gfnStatusLSB
            ;;
    esac
}

#### PeerGuardian Create allow.p2p
gfnPeerGuardianAllowP2P() {
    local sUser nUserID sUserIP sAllTrackers sTracker nIdTracker sTrackerName sListIPv4 sIPv4

    if [ -f /etc/pgl/pglcmd.conf ] && [ -f /etc/pgl/allow.p2p ]; then
        # /etc/pgl/allow.p2p
        if [ "${1}" -eq 1 ]; then log_daemon_msg "${Peerguardian_PermissionSelectedTrackers}"; fi
        (
            cat <<'EOF'
# allow.p2p - allow list for pglcmd
#
# This file contains IP ranges that shall not be checked.
# They must be in the PeerGuardian .p2p text format like this:
#   Some organization:1.0.0.0-1.255.255.255
# This is also true if your blocklists are in another format.
# Lines beginning with a hash (#) are comments and will be ignored.
#
# Do a "pglcmd restart" when you have edited this file.
EOF
        ) >/etc/pgl/allow.p2p

        # Allowing users
        gfnListCountUsers 'all'
        if [ -n "${gsUsersList}" ] && [ "${gsIpRestriction}" == "YES" ]; then
            echo "## Allow all MySB users" >>/etc/pgl/allow.p2p
            for sUser in ${gsUsersList}; do
                nUserID="$(cmdMySQL 'MySB_db' "SELECT id_users FROM users WHERE users_ident='${sUser}';")"
                sUserIP="$(cmdMySQL 'MySB_db' "SELECT ipv4 FROM users_addresses WHERE id_users='${nUserID}';")"
                for sIPv4 in ${sUserIP}; do
                    echo "${sUser}:${sIPv4}-255.255.255.255" >>/etc/pgl/allow.p2p
                done
            done
        fi

        # Allowing trackers
        sAllTrackers="$(cmdMySQL 'MySB_db' "SELECT id_trackers_list,tracker FROM trackers_list WHERE is_active='1';" | sed 's/\t/|/g;')"
        [ -n "${sAllTrackers}" ] && echo "## Trackers enabled" >>/etc/pgl/allow.p2p
        for sTracker in ${sAllTrackers}; do
            nIdTracker="$(echo "${sTracker}" | awk '{split($0,a,"|"); print a[1]}')"
            sTrackerName="$(echo "${sTracker}" | awk '{split($0,a,"|"); print a[2]}')"

            sListIPv4="$(cmdMySQL 'MySB_db' "SELECT ipv4 FROM trackers_list_ipv4 WHERE id_trackers_list='${nIdTracker}';")"
            for sIPv4 in ${sListIPv4}; do
                echo "${sTrackerName}:${sIPv4}-255.255.255.255" >>/etc/pgl/allow.p2p
            done
        done
        if [ "${1}" -eq 1 ]; then gfnStatusLSB; fi
    fi
}

#### PeerGuardian Create all needed iptables complementary rules
# Example: /usr/share/doc/pgld/examples/iptables-custom-insert.sh
gfnPeerGuardianIptablesInsert() {
    local sOvhIPv4 sResults sIPv4 nUID

    # Remove customs
    rm -f /etc/pgl/*.insert.sh
    rm -f /etc/pgl/*.remove.sh

    if [ "${1}" -eq 1 ]; then log_daemon_msg "${Peerguardian_CustomsRules}"; fi
    # insert
    echo "#!/bin/sh" >/etc/pgl/custom.insert.sh

    #### ICMP
    {
        echo
        echo "# ICMP"
        echo "iptables -I pgl_out -p icmp -j RETURN -m comment --comment \"ICMP OUT\""
    } >>/etc/pgl/custom.insert.sh

    #### DNScrypt-proxy
    if [ "${gbIsInstalled_DNScrypt}" == "YES" ]; then
        {
            echo
            echo "# DNScrypt-proxy"
        } >>/etc/pgl/custom.insert.sh
        nUID="$(id -u _dnscrypt-proxy)"
        if [ -n "${nUID}" ]; then
            {
                echo "iptables -I pgl_out -p tcp -j RETURN -m owner --uid-owner ${nUID} -m comment --comment \"OUTPUT TCP DNScrypt-proxy\""
                echo "iptables -I pgl_out -p udp -j RETURN -m owner --uid-owner ${nUID} -m comment --comment \"OUTPUT UDP DNScrypt-proxy\""
            } >>/etc/pgl/custom.insert.sh
        fi
    fi

    #### DNS / Bind
    nUID="$(id -u bind)"
    if [ -n "${nUID}" ]; then
        {
            echo
            echo "# Publics DNS (Bind9)"
        } >>/etc/pgl/custom.insert.sh
        for sDNS in "${gaDnsList[@]}"; do
            {
                echo "iptables -I pgl_out -p tcp -d ${sDNS} -j RETURN -m owner --uid-owner ${nUID} -m comment --comment \"OUTPUT TCP Publics DNS\""
                echo "iptables -I pgl_out -p udp -d ${sDNS} -j RETURN -m owner --uid-owner ${nUID} -m comment --comment \"OUTPUT UDP Publics DNS\""
            } >>/etc/pgl/custom.insert.sh
        done
    fi

    #### Stunnel
    nUID="$(id -u stunnel4)"
    if [ -n "${nUID}" ]; then
        {
            echo
            echo "# Stunnel"
        } >>/etc/pgl/custom.insert.sh
        echo "iptables -I pgl_out -p tcp -j RETURN -m owner --uid-owner ${nUID} -m comment --comment \"OUTPUT TCP Stunnel\"" >>/etc/pgl/custom.insert.sh
    fi

    #### Debian repos
    gaDebianRepos=(ftp.fr.debian.org ftp2.fr.debian.org security.debian.org)
    if [ -f "${MySB_InstallDir}"/files/fastest_stable_mirrors ]; then
        MirrorsList="$(grep 'http' "${MySB_InstallDir}"/files/fastest_stable_mirrors | sed -e 's/^ //g;s/\s+$//g;')"
        for Mirror in ${MirrorsList}; do
            sProto="$(echo "${Mirror}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')" # extract the protocol
            sURL="${Mirror//${sProto}/}"
            sUrlUser="$(echo "${sURL}" | grep @ | cut -d@ -f1)"                    # extract the user (if any)
            sHostPort=$(echo "${sURL}" | sed -e s,"${sUrlUser}"@,,g | cut -d/ -f1) # extract the host and port
            sHost="${sHostPort//:*/}"                                              # by request host without port
            gaDebianRepos+=("${sHost}")
        done
    fi
    if [ -f "${MySB_InstallDir}"/files/fastest_testing_mirrors ]; then
        MirrorsList="$(grep 'http' "${MySB_InstallDir}"/files/fastest_testing_mirrors | sed -e 's/^ //g;s/\s+$//g;')"
        for Mirror in ${MirrorsList}; do
            sProto="$(echo "${Mirror}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')" # extract the protocol
            sURL="${Mirror//${sProto}/}"
            sUrlUser="$(echo "${sURL}" | grep @ | cut -d@ -f1)"                    # extract the user (if any)
            sHostPort=$(echo "${sURL}" | sed -e s,"${sUrlUser}"@,,g | cut -d/ -f1) # extract the host and port
            sHost="${sHostPort//:*/}"                                              # by request host without port
            gaDebianRepos+=("${sHost}")
        done
    fi
    if [ "${gbToInstall_Webmin}" == "YES" ] || [ "${gbIsInstalled_Webmin}" == "YES" ]; then
        gaDebianRepos+=(download.webmin.com)
    fi
    if [ "${gsServerProvider}" == "HETZNER" ]; then
        gaDebianRepos+=(mirror.hetzner.de)
    fi
    {
        echo
        echo "# Debian repos"
    } >>/etc/pgl/custom.insert.sh
    for sDomain in "${gaDebianRepos[@]}"; do
        echo "iptables -I pgl_out -p tcp -d ${sDomain} --dport 80 -j RETURN -m comment --comment \"OUTPUT TCP Debian repo\"" >>/etc/pgl/custom.insert.sh
    done

    #### Needed domains
    {
        echo
        echo "# Needed domains"
    } >>/etc/pgl/custom.insert.sh
    for sDomain in "${gaNeededDomains[@]}"; do
        echo "iptables -I pgl_out -p tcp -d ${sDomain} -j RETURN -m comment --comment \"OUTPUT TCP Needed domain\"" >>/etc/pgl/custom.insert.sh
    done

    #### Monitoring
    if [ -n "${gsServerProvider}" ] && [ "${gsServerProvider}" != "${Global_None}" ]; then
        # insert
        {
            echo
            echo "# ${gsServerProvider} monitoring"
        } >>/etc/pgl/custom.insert.sh

        case "${gsServerProvider}" in
            OVH)
                sOvhIPv4="$(cmdMySQL 'MySB_db' "SELECT ipv4 FROM providers_monitoring WHERE provider='OVH';")"
                for sIPv4 in ${sOvhIPv4}; do
                    {
                        echo "iptables -I pgl_in -p udp -s ${sIPv4} --destination-port 6100:6200 -j RETURN -m comment --comment \"${gsServerProvider} monitoring\""
                        echo "iptables -I pgl_in -p icmp -s ${sIPv4} -j RETURN -m comment --comment \"${gsServerProvider} monitoring\""
                    } >>/etc/pgl/custom.insert.sh
                done
                ;;
            ONLINE | DIGICUBE | HETZNER)
                sResults="$(cmdMySQL 'MySB_db' "SELECT ipv4 FROM providers_monitoring WHERE provider='${gsServerProvider}';")"
                for sIPv4 in ${sResults}; do
                    echo "iptables -I pgl_in -p icmp -s ${sIPv4} -j RETURN -m comment --comment \"${gsServerProvider} monitoring\"" >>/etc/pgl/custom.insert.sh
                done
                ;;
        esac
    fi

    #### ruTorrent plugins
    {
        echo
        echo "# ruTorrent plugins"
    } >>/etc/pgl/custom.insert.sh
    # showip
    if [ -f "${gsRutorrentPluginsDir}"/showip/init.php ]; then
        grep 'file_get_contents' "${gsRutorrentPluginsDir}"/showip/init.php | awk '{ print $3 }' | cut -d '/' -f 3 | while read -r sFQDN; do
            echo "iptables -I pgl_out -p tcp -d ${sFQDN} --dport 80 -j RETURN -m comment --comment \"OUTPUT HTTP for plugin showip\"" >>/etc/pgl/custom.insert.sh
        done
    fi
    # loginmgr
    if [ -d "${gsRutorrentPluginsDir}"/loginmgr/accounts/ ]; then
        grep -rh 'http://' "${gsRutorrentPluginsDir}"/loginmgr/accounts/ | awk '{ print $4 }' | cut -d '/' -f 3 | sed 's/";//g;' | while read -r sFQDN; do
            echo "iptables -I pgl_out -p tcp -d ${sFQDN} --dport 80 -j RETURN -m comment --comment \"OUTPUT HTTP for plugin loginmgr\"" >>/etc/pgl/custom.insert.sh
        done
    fi
    # extsearch
    if [ -d "${gsRutorrentPluginsDir}"/extsearch/ ]; then
        grep -rh 'http://' "${gsRutorrentPluginsDir}"/extsearch/ | cut -d '/' -f 3 | sed "s/';//g;" | while read -r sFQDN; do
            echo "iptables -I pgl_out -p tcp -d ${sFQDN} --dport 80 -j RETURN -m comment --comment \"OUTPUT HTTP for plugin extsearch\"" >>/etc/pgl/custom.insert.sh
        done
    fi
    # mediastream
    echo "iptables -I pgl_out -p tcp -d go.divx.com --dport 80 -j RETURN -m comment --comment \"OUTPUT HTTP for plugin mediastream\"" >>/etc/pgl/custom.insert.sh

    echo >>/etc/pgl/custom.insert.sh

    # remove
    cp /etc/pgl/custom.insert.sh /etc/pgl/custom.remove.sh
    perl -pi -e "s/-I/-D/g" /etc/pgl/custom.remove.sh
    if [ "${1}" -eq 1 ]; then gfnStatusLSB; fi
}

#### PeerGuardian Create pglcmd.conf
gfnPeerGuardianPglcmdConf() {
    local sStatsMailTo sWatchDogMailTo sSearch aToAdd

    if [ -f /etc/pgl/pglcmd.conf ]; then
        if [ "${1}" -eq 1 ]; then log_daemon_msg "${Peerguardian_LoggingAndVerbosity}"; fi
        sStatsMailTo="$(cmdMySQL 'MySB_db' "SELECT pgl_email_stats FROM system;" | sed 's/0//g;s/1/root/g;')"
        sSearch="$(grep 'STATS_MAILTO=' /etc/pgl/pglcmd.conf)"
        perl -pi -e "s/${sSearch}/STATS_MAILTO=\"${sStatsMailTo}\"/g" /etc/pgl/pglcmd.conf
        unset sSearch

        sWatchDogMailTo="$(cmdMySQL 'MySB_db' "SELECT pgl_watchdog_email FROM system;" | sed 's/0//g;s/1/root/g;')"
        sSearch="$(grep 'WD_MAILTO=' /etc/pgl/pglcmd.conf)"
        perl -pi -e "s/${sSearch}/WD_MAILTO=\"${sWatchDogMailTo}\"/g" /etc/pgl/pglcmd.conf
        unset sSearch
        if [ "${1}" -eq 1 ]; then gfnStatusLSB; fi

        if [ "${1}" -eq 1 ]; then log_daemon_msg "${Peerguardian_AddingAllowedAddresses}"; fi
        sSearch="$(grep 'WHITE_IP_OUT=' /etc/pgl/pglcmd.conf)"
        sSearch="${sSearch//\//\\\/}"
        if [ -n "${sSearch}" ]; then
            aToAdd=()
            if [ "${gbIsInstalled_OpenVPN}" == "YES" ]; then
                aToAdd+=("10.0.0.0\/24" "10.0.1.0\/24" "10.0.2.1\/24")
            fi
            if gfnCheckCommand 0 docker; then
                aToAdd+=("172.28.0.0\/24" "172.29.0.0\/24")
            fi
            perl -pi -e "s/${sSearch}/WHITE_IP_OUT=\"${aToAdd[*]}\"/g" /etc/pgl/pglcmd.conf
        fi
        unset sSearch

        sSearch=$(grep 'WHITE_IP_FWD=' /etc/pgl/pglcmd.conf)
        sSearch="${sSearch//\//\\\/}"
        if [ -n "${sSearch}" ]; then
            aToAdd=()
            if [ "${gbIsInstalled_OpenVPN}" == "YES" ]; then
                aToAdd+=("10.0.0.0\/24" "10.0.1.0\/24" "10.0.2.1\/24")
            fi
            if gfnCheckCommand 0 docker; then
                aToAdd+=("172.28.0.0\/24" "172.29.0.0\/24")
            fi
            perl -pi -e "s/${sSearch}/WHITE_IP_FWD=\"${aToAdd[*]}\"/g" /etc/pgl/pglcmd.conf
        fi
        unset sSearch

        gfnPeerGuardianNetworkPortsGenerator

        sSearch=$(grep 'WHITE_TCP_IN=' /etc/pgl/pglcmd.conf)
        if [ -n "${sSearch}" ]; then
            perl -pi -e "s/${sSearch}/WHITE_TCP_IN=\"${WHITE_TCP_IN}\"/g" /etc/pgl/pglcmd.conf
        fi
        sSearch=$(grep 'WHITE_UDP_IN=' /etc/pgl/pglcmd.conf)
        if [ -n "${sSearch}" ]; then
            perl -pi -e "s/${sSearch}/WHITE_UDP_IN=\"${WHITE_UDP_IN}\"/g" /etc/pgl/pglcmd.conf
        fi
        sSearch=$(grep 'WHITE_TCP_OUT=' /etc/pgl/pglcmd.conf)
        if [ -n "${sSearch}" ]; then
            perl -pi -e "s/${sSearch}/WHITE_TCP_OUT=\"${WHITE_TCP_OUT}\"/g" /etc/pgl/pglcmd.conf
        fi
        sSearch=$(grep 'WHITE_UDP_OUT=' /etc/pgl/pglcmd.conf)
        if [ -n "${sSearch}" ]; then
            perl -pi -e "s/${sSearch}/WHITE_UDP_OUT=\"${WHITE_UDP_OUT}\"/g" /etc/pgl/pglcmd.conf
        fi
        if [ -n "${gbDevMode}" ] && [ "${gbDevMode}" -eq 1 ]; then
            cat /etc/pgl/pglcmd.conf >>"${MySB_InstallDir}"/logs/PGLCMD/"${gsScriptName}"_PGLCMD.log
        fi
        if [ "${1}" -eq 1 ]; then gfnStatusLSB; fi
    fi
}

#### Network ports generator
gfnPeerGuardianNetworkPortsGenerator() {
    local bLetsEncryptOpenPort sPortList
    WHITE_TCP_IN=''
    WHITE_UDP_IN=''
    WHITE_TCP_OUT='80 443'
    WHITE_UDP_OUT=''

    # TCP In
    WHITE_TCP_IN="${gsPort_MySB_HTTPS}"
    [ -n "${gsPort_NginX_HTTP}" ] && WHITE_TCP_IN="${WHITE_TCP_IN} ${gsPort_NginX_HTTP}"
    [ -n "${gsPort_NginX_HTTPS}" ] && WHITE_TCP_IN="${WHITE_TCP_IN} ${gsPort_NginX_HTTPS}"
    if [ "${gbIsInstalled_Cakebox}" == "YES" ] || [ "${gbToInstall_Cakebox}" == "YES" ]; then
        WHITE_TCP_IN="${WHITE_TCP_IN}"
    fi
    [ "${gsIpRestriction}" == "NO" ] && WHITE_TCP_IN="${WHITE_TCP_IN} ${gsPort_FTP} ${gsPort_SSH} ${gsPort_FTP_Data} ${gsPort_FTP_Passive}"

    # UDP In
    [ "${gsIpRestriction}" == "NO" ] && WHITE_UDP_IN="${WHITE_UDP_IN}"

    # TCP Out
    WHITE_TCP_OUT="${WHITE_TCP_OUT} ${gsPort_SMTP} ${gsPort_FTP} ${gsPort_SSH} ${gsPort_FTP_Data} ${gsPort_FTP_Passive}"
    [ "${gbIsInstalled_DNScrypt}" == "YES" ] && WHITE_TCP_OUT="${WHITE_TCP_OUT} ${sPortList}"
    WHITE_TCP_OUT="$(echo "${WHITE_TCP_OUT}" | xargs -n1 | sort -n -u | xargs)"

    # UDP Out
    WHITE_UDP_OUT="${WHITE_UDP_OUT}"
    [ "${gbIsInstalled_DNScrypt}" == "YES" ] && WHITE_UDP_OUT="${WHITE_UDP_OUT} ${sPortList}"
    WHITE_UDP_OUT="$(echo "$WHITE_UDP_OUT" | xargs -n1 | sort -n -u | xargs)"

    # Services
    if [ "${gbIsInstalled_Webmin}" == "YES" ] && [ "${gsIpRestriction}" == "NO" ]; then
        WHITE_TCP_IN="${WHITE_TCP_IN} ${gsPorts_Webmin}"
    fi
    if [ "${gbIsInstalled_PlexMedia}" == "YES" ]; then
        WHITE_TCP_IN="${WHITE_TCP_IN} ${gsPorts_PlexMedia} ${gsPorts_TCP_PlexMedia}"
    fi
    if [ "${gbToInstall_LetsEncrypt}" == "YES" ] || [ "${gbIsInstalled_LetsEncrypt}" == "YES" ]; then
        bLetsEncryptOpenPort="$(cmdMySQL 'MySB_db' "SELECT letsencrypt_openport FROM system WHERE id_system='1';")"
        [ "$bLetsEncryptOpenPort" -eq 1 ] && WHITE_TCP_IN="${WHITE_TCP_IN} 80"
    fi
    if [ "${gbIsInstalled_OpenVPN}" == "YES" ] && [ "${gsIpRestriction}" == "NO" ]; then
        case "${gsOpenVPN_Proto}" in
            "udp") WHITE_UDP_IN="${WHITE_UDP_IN} ${gsPort_OpenVPN_WithGW} ${gsPort_OpenVPN_WithoutGW} ${gsPort_OpenVPN_TAP_WithoutGW}" ;;
            "tcp") WHITE_TCP_IN="${WHITE_TCP_IN} ${gsPort_OpenVPN_WithGW} ${gsPort_OpenVPN_WithoutGW} ${gsPort_OpenVPN_TAP_WithoutGW}" ;;
        esac

        # PlexMedia UDP ports opened only with OpenVPN installed
        if [ "${gbIsInstalled_PlexMedia}" == "YES" ]; then
            WHITE_UDP_IN="${WHITE_UDP_IN} ${gsPorts_UDP_PlexMedia}"
        fi
    fi

    WHITE_TCP_IN=$(echo "${WHITE_TCP_IN}" | sed -e 's/^ //g;s/\s+$//g;')
    WHITE_UDP_IN=$(echo "$WHITE_UDP_IN" | sed -e 's/^ //g;s/\s+$//g;')
    WHITE_TCP_OUT=$(echo "${WHITE_TCP_OUT}" | sed -e 's/^ //g;s/\s+$//g;')
    WHITE_UDP_OUT=$(echo "$WHITE_UDP_OUT" | sed -e 's/^ //g;s/\s+$//g;')
    export WHITE_TCP_IN WHITE_UDP_IN WHITE_TCP_OUT WHITE_UDP_OUT
}

#### Create base config
gfnPeerGuardianCreateBaseConfig() {
    #### Create config files
    install -o root -g root -m 0644 "${MySB_InstallDir}"/templates/other/etc.pgl.pglcmd.conf.tmpl /etc/pgl/pglcmd.conf

    # Create '/etc/pgl/pglcmd.conf'
    gfnPeerGuardianPglcmdConf 0

    # Create '/etc/pgl/allow.p2p'
    gfnPeerGuardianAllowP2P 0

    # Create '/etc/pgl/*.insert.sh'
    gfnPeerGuardianIptablesInsert 0
}

##################### LAST LINE ######################################
