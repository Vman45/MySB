#!/bin/bash
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
{ [ -z "${vars}" ] || [ "${vars}" -ne 1 ]; } && {
    echo "Please load 'vars' file before..."
    exit 0
}
##################### FIRST LINE #####################################

#### APT-mirror (local mirrors)
gfnCreateLocalMirror() {
    local sArch

    case $(getconf LONG_BIT) in
        64) sArch="amd64" ;;
        *) sArch="i386" ;;
    esac

    #### mirror.list
    install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/apt/etc.apt.mirror.list.tmpl /etc/apt/mirror.list
    perl -pi -e "s/<Arch>/${sArch}/g" /etc/apt/mirror.list

    #### postmirror.sh & clean.sh
    if [ ! -f /var/spool/apt-mirror/var/clean.sh ]; then
        touch /var/spool/apt-mirror/var/clean.sh
    fi
    {
        echo '#!/bin/sh'
        # echo "# Sury repo - Remove unused PHP version"
        # echo "rm -rf /var/spool/apt-mirror/mirror/packages.sury.org/php/pool/main/p/php5.6/"
        # echo "rm -rf /var/spool/apt-mirror/mirror/packages.sury.org/php/pool/main/p/php7.0/"
        # echo "rm -rf /var/spool/apt-mirror/mirror/packages.sury.org/php/pool/main/p/php7.1/"
        # echo "rm -rf /var/spool/apt-mirror/mirror/packages.sury.org/php/pool/main/p/php7.2/"
        echo "# Apt-Mirror - Clean script"
        echo "/var/spool/apt-mirror/var/clean.sh"
    } >/var/spool/apt-mirror/var/postmirror.sh
    chmod 0755 /var/spool/apt-mirror/var/*.sh
    chown apt-mirror:apt-mirror /var/spool/apt-mirror/var/*.sh

    # #### PHP 7.3 (Sury)
    # # GPG Key
    # $binCURL -o "/tmp/php.key" "https://packages.sury.org/php/apt.gpg"
    # if [ -f /tmp/php.key ]; then
    #     apt-key add /tmp/php.key
    # fi
    # # Local mirrors
    # {
    #     echo "# PHP 7.3 (Sury)"
    #     echo "deb [arch=${sArch}] https://packages.sury.org/php/ ${gsDebianRelease} main"
    #     echo "clean https://packages.sury.org/php/"
    # } >>/etc/apt/mirror.list
    # # php.list (local)
    # {
    #     echo "# PHP 7.3 (Sury)"
    #     echo "# https://github.com/oerdnj/deb.sury.org/wiki/Managing-Multiple-Versions"
    #     echo "deb [arch=${sArch}] file:///var/spool/apt-mirror/mirror/packages.sury.org/php/ ${gsDebianRelease} main"
    # } >/etc/apt/sources.list.d/php.list

    #### Docker
    # GPG Key
    ${binCURL} -o "/tmp/docker.key" "https://download.docker.com/linux/debian/gpg"
    if [ -f /tmp/docker.key ]; then
        apt-key add /tmp/docker.key
    fi
    # Local mirrors
    {
        echo "# Docker"
        echo "deb [arch=${sArch}] https://download.docker.com/linux/debian/ ${gsDebianRelease} stable"
        echo "clean https://download.docker.com/linux/debian/"
    } >>/etc/apt/mirror.list
    # docker.list (local)
    {
        echo "# Docker"
        echo "deb [arch=${sArch}] file:///var/spool/apt-mirror/mirror/download.docker.com/linux/debian/ ${gsDebianRelease} stable"
    } >/etc/apt/sources.list.d/docker.list

    #### MariaDB
    # # GPG Key
    # apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xF1656F24C74CD1D8
    # # Local mirrors

    # {
    #     echo "# MariaDB 10.3"
    #     echo "deb [arch=${sArch}] http://mariadb.mirrors.ovh.net/MariaDB/repo/10.3/debian/ ${gsDebianRelease} main"
    #     echo "clean http://mariadb.mirrors.ovh.net/MariaDB/repo/10.3/debian/"
    #     echo "deb [arch=${sArch}] http://mirror.zol.co.zw/mariadb/repo/10.3/debian/ ${gsDebianRelease} main"
    #     echo "clean http://mirror.zol.co.zw/mariadb/repo/10.3/debian/"
    # } >>/etc/apt/mirror.list
    # # peerguardian.list (local)
    # {
    #     echo "# MariaDB 10.3"
    #     echo "deb [arch=${sArch}] file:///var/spool/apt-mirror/mirror/mariadb.mirrors.ovh.net/MariaDB/repo/10.3/debian/ ${gsDebianRelease} main"
    #     echo "deb [arch=${sArch}] file:///var/spool/apt-mirror/mirror/mirror.zol.co.zw/mariadb/repo/10.3/debian/ ${gsDebianRelease} main"
    # } >/etc/apt/sources.list.d/mariadb.list

    #### Peerguardian
    # if [ "${gbToInstall_PeerGuardian}" == "YES" ] || [ "${gbIsInstalled_PeerGuardian}" == "YES" ]; then
    #     # GPG Key
    #     apt-key adv --keyserver keys.gnupg.net --recv-keys C0145138
    #     until gpg --keyserver keyserver.ubuntu.com --recv-keys C0145138; do
    #         sleep 1
    #     done
    #     until gpg --export --armor C0145138 | apt-key add -; do
    #         sleep 1
    #     done
    #     # Local mirrors
    #     {
    #         echo "# PeerGuardian"
    #         echo "deb [allow-insecure=yes,trusted=yes,arch=${sArch}] http://moblock-deb.sourceforge.net/debian/ stretch main"
    #         echo "clean http://moblock-deb.sourceforge.net/debian/"
    #     } >>/etc/apt/mirror.list
    #     # peerguardian.list (local)
    #     {
    #         echo "# PeerGuardian"
    #         echo "deb [allow-insecure=yes,trusted=yes,arch=${sArch}] file:///var/spool/apt-mirror/mirror/moblock-deb.sourceforge.net/debian/ stretch main"
    #     } >/etc/apt/sources.list.d/peerguardian.list
    # fi

    #### Webmin
    if [ "${gbToInstall_Webmin}" == "YES" ] || [ "${gbIsInstalled_Webmin}" == "YES" ]; then
        # GPG Key
        ${binCURL} -o "/tmp/jcameron-key.asc" http://www.webmin.com/jcameron-key.asc
        if [ -f /tmp/jcameron-key.asc ]; then
            apt-key add /tmp/jcameron-key.asc
        fi
        # Local mirrors
        {
            echo "# Webmin"
            echo "deb [arch=${sArch}] http://download.webmin.com/download/repository/ sarge contrib"
            echo "clean http://download.webmin.com/download/repository/"
            # echo "deb [arch=${sArch}] http://webmin.mirror.somersettechsolutions.co.uk/repository/ sarge contrib"
            # echo "clean http://webmin.mirror.somersettechsolutions.co.uk/repository/"
        } >>/etc/apt/mirror.list
        # webmin.list (local)
        {
            echo "# Webmin"
            echo "deb [arch=${sArch}] file:///var/spool/apt-mirror/mirror/download.webmin.com/download/repository/ sarge contrib"
            # echo "deb [arch=${sArch}] file:///var/spool/apt-mirror/mirror/webmin.mirror.somersettechsolutions.co.uk/repository/ sarge contrib"
        } >/etc/apt/sources.list.d/webmin.list
    fi

    #### NodeJS v0.12.x
    # GPG Key
    # ${binCURL} -o /tmp/nodesource.gpg.key https://deb.nodesource.com/gpgkey/nodesource.gpg.key
    # if [ -f /tmp/nodesource.gpg.key ]; then
    #     apt-key add /tmp/nodesource.gpg.key
    # fi
    # # Local mirrors
    # {
    #     echo "# NodeJS v0.12.x"
    #     echo "deb https://deb.nodesource.com/node_12.x ${gsDebianRelease} main"
    #     echo "clean https://deb.nodesource.com/node_12.x"
    # } >>/etc/apt/mirror.list
    # # nodejs.list (local)
    # {
    #     echo "# NodeJS v0.12.x"
    #     echo "deb [arch=${sArch}] file:///var/spool/apt-mirror/mirror/deb.nodesource.com/node_12.x ${gsDebianRelease} main"
    # } >/etc/apt/sources.list.d/nodejs.list

    #### Download mirrors with 'apt-mirror'
    echo
    cat /etc/apt/mirror.list
    echo
    apt-mirror
}

#### Basics Sources List
gfnCreateBasicSourcesList() {
    local sReposInFile sSourcesList sRepo

    sReposInFile="$(grep '^deb ' /etc/apt/sources.list | grep -v 'security\|updates' | awk '{ print $2 }')"
    sReposInFile="${sReposInFile} http://ftp.fr.debian.org/debian/ http://ftp2.fr.debian.org/debian/"

    case $(getconf LONG_BIT) in
        64) sArch="amd64" ;;
        *) sArch="i386" ;;
    esac

    # Stable
    sSourcesList="/etc/apt/sources.list"
    echo "# Stable Sources List" >${sSourcesList}
    for sRepo in ${sReposInFile}; do
        if (! grep -q "${sRepo}" ${sSourcesList}); then
            {
                echo ""
                echo "# ${sRepo}"
                echo "deb [arch=${sArch}] ${sRepo} ${gsDebianRelease} main contrib non-free"
                echo "deb [arch=${sArch}] ${sRepo} ${gsDebianRelease}-updates main contrib non-free"
            } >>${sSourcesList}
        fi
    done
    {
        echo ""
        echo "# Security"
        echo "deb [arch=${sArch}] http://security.debian.org ${gsDebianRelease}/updates main contrib non-free"
    } >>${sSourcesList}

    # Testing
    sSourcesList="/etc/apt/sources.list.d/testing.list"
    echo "# Testing Sources List" >${sSourcesList}
    for sRepo in ${sReposInFile}; do
        if (! grep -q "${sRepo}" ${sSourcesList}); then
            {
                echo ""
                echo "# ${sRepo}"
                echo "deb [arch=${sArch}] ${sRepo} testing main contrib non-free"
                echo "deb [arch=${sArch}] ${sRepo} testing-updates main contrib non-free"
            } >>${sSourcesList}
        fi
    done
    {
        echo ""
        echo "# Security"
        echo "deb [arch=${sArch}] http://security.debian.org testing-security main contrib non-free"
    } >>${sSourcesList}
}

##################### LAST LINE ######################################
