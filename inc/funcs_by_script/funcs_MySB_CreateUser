#!/bin/bash
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
{ [ -z "${vars}" ] || [ "${vars}" -ne 1 ]; } && {
    echo "Please load 'vars' file before..."
    return
}
##################### FIRST LINE #####################################

#### Minio
gfnMinioUsersBuckets() {
    local sVerbose sSwitch sUser nIdUser sSecretKey sMode
    sSwitch="${1}"
    sUser="${2}"
    sMode="${3}"
    [ -z "${sSwitch}" ] && return
    [ -z "${sUser}" ] && return
    [ "${gbIsInstalled_Minio}" != "YES" ] && return

    case "${sSwitch}" in
        'create')
            sPolicy="${sUser}_complete"
            nIdUser="$(cmdMySQL 'MySB_db' "SELECT id_users FROM users WHERE users_ident='${sUser}';")"

            sUserValues="$(cmdMySQL 'MySB_db' "SELECT access_key,secret_key FROM minio WHERE id_users='${nIdUser}' AND policy='${sUser}_complete';" | sed 's/\t/|/g;')"
            sAccessKey="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[1]}')"
            sSecretKey="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[2]}')"
            if [ -z "${sAccessKey}" ] && [ -z "${sSecretKey}" ]; then
                sAccessKey="${sAccessKey:-$(gfnGenPassword 16)}"
                sSecretKey="${sSecretKey:-$(gfnGenPassword 32)}"
                cmdMySQL 'MySB_db' "INSERT INTO minio (id_users, access_key, secret_key, policy) VALUES ('${nIdUser}', '${sAccessKey}', '${sSecretKey}', '${sUser}_complete');"
            elif [ -z "${sAccessKey}" ] || [ -z "${sSecretKey}" ]; then
                sAccessKey="${sAccessKey:-$(gfnGenPassword 16)}"
                sSecretKey="${sSecretKey:-$(gfnGenPassword 32)}"
                cmdMySQL 'MySB_db' "UPDATE minio SET access_key='${sAccessKey}',secret_key='${sSecretKey}' WHERE id_users='${nIdUser}' AND policy='${sUser}_complete';"
            fi

            # Bucket
            if [ -d "/home/${sUser}/rtorrent/complete/" ]; then
                [ ! -h "/home/minio/data/${sUser}_complete" ] && ln -s "/home/${sUser}/rtorrent/complete/" "/home/minio/data/${sUser}_complete"
            fi

            # Create a new user with canned policy
            if [ -f "${MySB_InstallDir}/templates/minio/users_complete.json.tmpl" ]; then
                install -v -o root -g root -m 0644 "${MySB_InstallDir}/templates/minio/users_complete.json.tmpl" /tmp/users.json
                sed -i "s/<user>/${sUser}/g;" /tmp/users.json
                mc admin policy add mysb "${sPolicy}" /tmp/users.json

                if [ -n "${sSecretKey}" ] && [ -n "${sSecretKey}" ]; then
                    # Create a new user
                    mc admin user add mysb "${sAccessKey}" "${sSecretKey}"
                    mc admin policy set mysb "${sPolicy}" user="${sAccessKey}"
                fi
            fi

            # Unset
            unset MySQL_RootPassword MySQL_MysbPassword MySQL_BackupManager MySQL_TorrentPassword MySQL_Secret
            rm -f /tmp/users.json

            # Update others buckets policies
            [ "${sMode}" != "recreate" ] && gfnMinioUsersBuckets update "${sUser}" &>/dev/null
            ;;
        'delete')
            nIdUser="$(cmdMySQL 'MySB_db' "SELECT id_users FROM users WHERE users_ident='${sUser}';")"
            sUserValues="$(cmdMySQL 'MySB_db' "SELECT access_key,secret_key FROM minio WHERE id_users='${nIdUser}';" | sed 's/\t/|/g;')"
            sAccessKey="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[1]}')"
            sSecretKey="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[2]}')"
            mc admin user remove mysb "${sAccessKey}"
            [ -h "/home/minio/data/${sUser}_complete" ] && rm "/home/minio/data/${sUser}_complete"
            ;;
        'update')
            # Minio users
            gfnListCountUsers 'normal'
            gsUsersList="${gsUsersList//${sUser}/}"
            for sUser in ${gsUsersList}; do
                if (grep -q "${sUser}_complete" <<<"$(mc admin policy list mysb)"); then
                    mc admin policy remove mysb "${sUser}_complete"
                    gfnMinioUsersBuckets create "${sUser}" 'recreate' &>/dev/null
                fi
            done

            # Minio seedbox user
            sUserValues="$(cmdMySQL 'MySB_db' "SELECT access_key,secret_key FROM minio WHERE id_users='${gnMainUserId}' AND policy='*_complete';" | sed 's/\t/|/g;')"
            sAccessKey="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[1]}')"
            sSecretKey="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[2]}')"
            if [ -z "${sAccessKey}" ] && [ -z "${sSecretKey}" ]; then
                sAccessKey="${sAccessKey:-$(gfnGenPassword 16)}"
                sSecretKey="${sSecretKey:-$(gfnGenPassword 32)}"
                cmdMySQL 'MySB_db' "INSERT INTO minio (id_users, access_key, secret_key, policy) VALUES ('${gnMainUserId}', '${sAccessKey}', '${sSecretKey}', '*_complete');"
            elif [ -z "${sAccessKey}" ] || [ -z "${sSecretKey}" ]; then
                sAccessKey="${sAccessKey:-$(gfnGenPassword 16)}"
                sSecretKey="${sSecretKey:-$(gfnGenPassword 32)}"
                cmdMySQL 'MySB_db' "UPDATE minio SET access_key='${sAccessKey}',secret_key='${sSecretKey}' WHERE id_users='${gnMainUserId}' AND policy='*_complete';"
            fi

            # Create a new user with canned policy
            install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/minio/seedbox_complete.json.tmpl /tmp/seedbox_complete.json
            mc admin policy add mysb seedbox_complete /tmp/seedbox_complete.json
            rm -f /tmp/seedbox_complete.json

            if [ -n "${sAccessKey}" ] && [ -n "${sSecretKey}" ]; then
                # Create a new user
                mc admin user add mysb "${sAccessKey}" "${sSecretKey}"
                mc admin policy set mysb seedbox_complete user="${sAccessKey}"
            fi
            rm -f /tmp/seedbox_complete.json
            ;;
    esac
}

#### NextCloud account manage
gfnNextCloudAccountManage() {
    local sSwitch sUserAccount sPassword sUserMail

    sSwitch="$1"
    sUserAccount="$2"
    sPassword="$3"
    OC_PASS="${sPassword}"
    export OC_PASS

    case "${sSwitch}" in
        'create')
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:add --password-from-env --display-name=\"${sUserAccount}\" --group=\"MySB_users\" ${sUserAccount}" &>/dev/null
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:setting \"${sUserAccount}\" core lang \"${EnvLang}\""
            sUserMail="$(${binMySQL} "SELECT users_email FROM users WHERE users_ident='${sUserAccount}';")"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:setting \"${sUserAccount}\" settings email \"${sUserMail}\""
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:setting \"${sUserAccount}\" core timezone ${gsTimeZone}"
            # Create new external mount (MySB_Home)
            IdStorage=$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:create MySB_Home local null::null" | awk '{ print $5 }')
            if [ -n "${IdStorage}" ]; then
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:applicable --add-user \"${seedUser}\" ${IdStorage}" &>/dev/null
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:config ${IdStorage} datadir '/home/${seedUser}/'"
                # su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} filesystem_check_changes 'false'"
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} encrypt 'false'"
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} previews 'true'"
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} enable_sharing 'true'"
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} encoding_compatibility 'false'"
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:verify ${IdStorage}" &>/dev/null
            fi
            ;;
        'edit')
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:resetpassword --password-from-env ${sUserAccount}" &>/dev/null
            ;;
    esac
}

#### ruTorrent Plugin Spacedisk NextCloud quotas included
gfnPluginDiskspaceQuotaIncluded() {
    function fnCalculate() {
        local sFnUser sFnPartition nFnUserQuota nFnTotal nFnFree nFnLess nFnNumLine
        [ -n "${1}" ] && sFnUser="${1}" || return 1

        # nFnTotal="$(cmdMySQL 'MySB_db' "SELECT quota FROM users WHERE users_ident='${sFnUser}';")"
        # nFnFree="$(cmdMySQL 'MySB_db' "SELECT space_used FROM users WHERE users_ident='${sFnUser}';")"
        (grep -q '[[:space:]]/home[[:space:]]' /etc/fstab) && sFnPartition="/home" || sFnPartition="/"
        nFnUserQuota=$(repquota -u ${sFnPartition} | grep ^${sFnUser})
        nFnTotal=$(echo "${nFnUserQuota}" | awk '{printf $4}')
        nFnTotal=$((nFnTotal * 1024))
        nFnFree=$(echo "${nFnUserQuota}" | awk '{printf ($4-$3)}')
        nFnFree=$((nFnFree * 1024))
        {
            echo "total:${nFnTotal}"
            echo "free:${nFnFree}"
        } >/home/"${sFnUser}"/rtorrent/.session/quota.txt
        if [ -f "${gsRutorrentDir}/conf/users/${sFnUser}/diskspace/conf.php" ]; then
            # nFnLess=$((((nFnTotal - 5) / 100) / 1024))     # must remain 5%
            nFnLess=$(((nFnTotal - 5) / 100)) # must remain 5%
            if [ -n "${nFnLess}" ]; then
                nFnNumLine=$(grep 'notifySpaceLimit' -n -m 1 "${gsRutorrentDir}/conf/users/${sFnUser}/diskspace/conf.php" | cut -d ':' -f 1)
                sed -i '/notifySpaceLimit/d' "${gsRutorrentDir}/conf/users/${sFnUser}/diskspace/conf.php"
                sed -i "${nFnNumLine}i\$notifySpaceLimit = ${nFnLess};		// in Mb" "${gsRutorrentDir}/conf/users/${sFnUser}/diskspace/conf.php"
            fi
        fi
    }

    if [ -z "${1}" ]; then
        gfnListCountUsers 'normal'
        for sUser in ${gsUsersList}; do
            fnCalculate "${sUser}"
        done
    else
        fnCalculate "${1}"
    fi
}

#### Quota
gfnManageQuota() {
    local sMessage sUser sVerbose sUsersList
    local nAvailableSpace nNextCloudSpace nSpaceByUser nTotalNormalManualUsers nTotalNormalAutoUsers nUserQuotaSystem nUserQuotaNextCloud
    sMessage=""
    sVerbose=""
    nTotalNormalManualUsers=0
    nTotalNormalAutoUsers=0
    case $(getconf LONG_BIT) in
        64) sVFSV="vfsv1" ;;
        *) sVFSV="vfsv0" ;;
    esac
    if [ -n "$1" ]; then
        if [ "$1" == "-v" ]; then
            sVerbose="$1"
        else
            sMessage="$1"
        fi
    fi
    nAvailableSpace="$(cmdMySQL 'MySB_db' "SELECT quota_default FROM system WHERE id_system='1';")"

    # Update number of users
    gfnListCountUsers 'active'
    cmdMySQL 'MySB_db' "UPDATE system SET rt_nb_users='${gnTotalUsers}' WHERE id_system='1';" "${sVerbose}"

    # Setting default quota (available space)
    if [ -z "${nAvailableSpace}" ] || [ "${nAvailableSpace}" == 'NULL' ] || [ "${nAvailableSpace}" -eq 0 ]; then
        nAvailableSpace=$(gfnQuotaSpaceAvailable)
        cmdMySQL 'MySB_db' "UPDATE system SET quota_default='${nAvailableSpace}' WHERE id_system='1';" "${sVerbose}"
    fi

    # Calculate space used for each users
    gfnQuotaSpaceUsed

    # Disable quota for Plex users
    sUsersList="$(cmdMySQL 'MySB_db' "SELECT users_ident FROM users WHERE quota_type='plex';")"
    for sUser in ${sUsersList}; do
        cmdMySQL 'MySB_db' "UPDATE users SET quota='0' WHERE users_ident='${sUser}';" "${sVerbose}"
        setquota -u -F $sVFSV "${sUser}" 0 0 0 0 -a
    done

    # Check normal users with a manual quota
    sUsersList="$(cmdMySQL 'MySB_db' "SELECT users_ident FROM users WHERE quota_type='manual' AND account_type='normal';")"
    for sUser in ${sUsersList}; do
        nUserQuotaSystem="$(cmdMySQL 'MySB_db' "SELECT quota FROM users WHERE users_ident='${sUser}';")"
        nUserQuotaNextCloud=${nUserQuotaSystem}

        # Deduction of space used by nextcloud (not included in linux quota)
        if [ -d /home/nextcloud/"${sUser}"/ ]; then
            nNextCloudSpace="$(du -s /home/nextcloud/"${sUser}"/ | awk '{ print $1 }')" # (Kb)
            nUserQuotaSystem=$((nUserQuotaSystem - nNextCloudSpace))
        fi

        # Quota by user with manual quota
        setquota -u -F $sVFSV "${sUser}" ${nUserQuotaSystem} ${nUserQuotaSystem} 0 0 -a

        # NextCloud Quota
        if [ "${gbIsInstalled_NextCloud}" == "YES" ]; then
            if (su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:info \"${sUser}\"" >/dev/null); then
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:setting \"${sUser}\" files quota \"${nUserQuotaNextCloud} KB\""
            fi
        fi

        ((nTotalNormalManualUsers++))
        nAvailableSpace=$((nAvailableSpace - nUserQuotaSystem))
    done

    # Setting quota and calculate space used for each users
    gfnListCountUsers 'normal'
    nTotalNormalAutoUsers=$((gnTotalUsers - nTotalNormalManualUsers))
    [ "${nTotalNormalAutoUsers}" -le 0 ] && nTotalNormalAutoUsers=${gnTotalUsers}
    nSpaceByUser=$((nAvailableSpace / nTotalNormalAutoUsers))

    # Check normal users with an auto quota
    sUsersList="$(cmdMySQL 'MySB_db' "SELECT users_ident FROM users WHERE quota_type='auto' AND account_type='normal';")"
    for sUser in ${sUsersList}; do
        if [ -n "${sMessage}" ]; then log_daemon_msg "${sMessage} [${sUser}]"; fi

        nUserQuotaSystem=${nSpaceByUser}
        nUserQuotaNextCloud=${nSpaceByUser}
        cmdMySQL 'MySB_db' "UPDATE users SET quota='${nUserQuotaSystem}' WHERE users_ident='${sUser}';" "${sVerbose}"

        # Deduction of space used by nextcloud
        if [ -d /home/nextcloud/"${sUser}"/ ]; then
            nNextCloudSpace="$(du -s /home/nextcloud/"${sUser}"/ | awk '{ print $1 }')" # (Kb)
            nUserQuotaSystem=$((nSpaceByUser - nNextCloudSpace))
        fi

        # Quota by user with automatic quota
        setquota -u -F $sVFSV "${sUser}" ${nUserQuotaSystem} ${nUserQuotaSystem} 0 0 -a

        # NextCloud Quota
        if [ "${gbIsInstalled_NextCloud}" == "YES" ]; then
            if (su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:info \"${sUser}\"" >/dev/null); then
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:setting \"${sUser}\" files quota \"${nUserQuotaNextCloud} KB\""
            fi
        fi
        if [ -n "${sMessage}" ]; then gfnStatusLSB; fi
    done

    # ruTorrent Plugin Sapcedisk quotas included
    gfnPluginDiskspaceQuotaIncluded ""
}

#### Cakebox-Light Users Config
gfnCakeboxUsersConfigs() {
    local sUser

    if [ "${gbIsInstalled_Cakebox}" == "YES" ] && [ -d "${gsCakeboxDir}" ]; then
        sUser="$1"

        if [ -f "$gsCakeboxDir"/config/default.php.dist ]; then
            rm -f "$gsCakeboxDir"/config/default.php.dist
        fi
        install -o root -g www-data -m 0660 "${MySB_InstallDir}"/templates/cakebox/config.user.tmpl "$gsCakeboxDir/config/${sUser}.php"
        perl -pi -e "s/<server_name>/${sUser}/g" "$gsCakeboxDir/config/${sUser}.php"
        case "${EnvLang}" in
            "fr") perl -pi -e "s/<lang>/${EnvLang}/g" "$gsCakeboxDir/config/${sUser}.php" ;;
            "en") perl -pi -e "s/<lang>/${EnvLang}/g" "$gsCakeboxDir/config/${sUser}.php" ;;
        esac
    fi
}

#### Change rights for users
gfnManageUserHomeDir() {
    local sUser="$1"

    #### Create missing directories
    [ ! -d /home/"${sUser}" ] && mkdir /home/"${sUser}"
    [ ! -d /home/"${sUser}"/.ssh ] && mkdir /home/"${sUser}"/.ssh
    [ ! -d /home/"${sUser}"/db ] && mkdir /home/"${sUser}"/db
    [ ! -d /home/"${sUser}"/blocklist ] && mkdir /home/"${sUser}"/blocklist
    [ ! -d /home/"${sUser}"/logs ] && mkdir /home/"${sUser}"/logs
    [ ! -d /home/"${sUser}"/scripts ] && mkdir /home/"${sUser}"/scripts
    [ ! -d /home/"${sUser}"/rtorrent ] && mkdir /home/"${sUser}"/rtorrent
    [ ! -d /home/"${sUser}"/rtorrent/watch ] && mkdir /home/"${sUser}"/rtorrent/watch
    [ ! -d /home/"${sUser}"/rtorrent/complete ] && mkdir /home/"${sUser}"/rtorrent/complete
    [ ! -d /home/"${sUser}"/rtorrent/.session ] && mkdir /home/"${sUser}"/rtorrent/.session
    # [ ! -d /home/"${sUser}"/rtorrent/config.d ] && mkdir /home/"${sUser}"/rtorrent/config.d
    [ ! -d /home/"${sUser}"/rtorrent/torrents ] && mkdir /home/"${sUser}"/rtorrent/torrents
    [ ! -d /home/"${sUser}"/share ] && mkdir /home/"${sUser}"/share

    #### Change rights and owners
    # /home/user
    chown root:root /home/"${sUser}"
    chmod 0755 /home/"${sUser}"

    # .bashrc, .bash_logout, .profile, .rtorrent.rc, .rTorrent_finished.sh, .rTorrent_erased.sh, .rTorrent_inserted_new.sh, .ssh/
    if [ -d /home/"${sUser}"/.ssh ]; then
        chown root:"${sUser}" /home/"${sUser}"/.ssh
        chmod 0750 /home/"${sUser}"/.ssh
    fi
    if [ -f /home/"${sUser}"/.rtorrent.rc ]; then
        chown root:"${sUser}" /home/"${sUser}"/.rtorrent.rc
        chmod 0740 /home/"${sUser}"/.rtorrent.rc
    fi
    if [ -f /home/"${sUser}"/.bashrc ]; then
        chown root:"${sUser}" /home/"${sUser}"/.bashrc
        chmod 0740 /home/"${sUser}"/.bashrc
    fi
    if [ -f /home/"${sUser}"/.bash_logout ]; then
        chown root:"${sUser}" /home/"${sUser}"/.bash_logout
        chmod 0740 /home/"${sUser}"/.bash_logout
    fi
    if [ -f /home/"${sUser}"/.profile ]; then
        chown root:"${sUser}" /home/"${sUser}"/.profile
        chmod 0740 /home/"${sUser}"/.profile
    fi
    # Specifics scripts
    if [ -f /home/"${sUser}"/.rTorrent_tasks.sh ]; then
        chown root:root /home/"${sUser}"/.rTorrent_tasks.sh
        chmod 0750 /home/"${sUser}"/.rTorrent_tasks.sh
    fi
    if [ -f /home/"${sUser}"/.rTorrent_inserted_new.sh ]; then
        chown root:"${sUser}" /home/"${sUser}"/.rTorrent_inserted_new.sh
        chmod 0750 /home/"${sUser}"/.rTorrent_inserted_new.sh
    fi
    if [ -f /home/"${sUser}"/.rTorrent_finished.sh ]; then
        chown root:"${sUser}" /home/"${sUser}"/.rTorrent_finished.sh
        chmod 0750 /home/"${sUser}"/.rTorrent_finished.sh
    fi
    if [ -f /home/"${sUser}"/.rTorrent_erased.sh ]; then
        chown root:"${sUser}" /home/"${sUser}"/.rTorrent_erased.sh
        chmod 0750 /home/"${sUser}"/.rTorrent_erased.sh
    fi
    # /home/.check_annoncers_${sUser}
    [ ! -f /home/.check_annoncers_"${sUser}" ] && touch /home/.check_annoncers_"${sUser}"
    [ "$(stat --printf %U /home/.check_annoncers_"${sUser}"):$(stat --printf %G /home/.check_annoncers_"${sUser}")" != "root:MySB_users" ] && chown root:MySB_users /home/.check_annoncers_"${sUser}"
    [ "$(stat --printf %a /home/.check_annoncers_"${sUser}")" -ne 666 ] && chmod 0666 /home/.check_annoncers_"${sUser}"

    # /home/user/db
    chmod -R 0770 /home/"${sUser}"/db
    chown -R "${sUser}":www-data /home/"${sUser}"/db
    # /home/user/blocklist
    chmod -R 0755 /home/"${sUser}"/blocklist
    chown -R root:"${sUser}" /home/"${sUser}"/blocklist
    # /home/user/logs
    chmod -R 0775 /home/"${sUser}"/logs
    chown -R root:"${sUser}" /home/"${sUser}"/logs
    # [ -f /home/"${sUser}"/logs/rutorrent.log ] && chown :www-data /home/"${sUser}"/logs/rutorrent.log
    # /home/user/scripts
    chmod -R 0774 /home/"${sUser}"/scripts
    chown -R root:"${sUser}" /home/"${sUser}"/scripts
    # /home/user/rtorrent
    chown root:"${sUser}" /home/"${sUser}"/rtorrent
    chmod 0775 /home/"${sUser}"/rtorrent
    # /home/user/rtorrent/watch
    # chown root:"${sUser}" /home/"${sUser}"/rtorrent/watch
    chown root:MySB_users /home/"${sUser}"/rtorrent/watch
    chmod 0775 /home/"${sUser}"/rtorrent/watch
    chown "${sUser}":www-data /home/"${sUser}"/rtorrent/watch/* &>/dev/null
    # /home/user/rtorrent/complete
    chown root:"${sUser}" /home/"${sUser}"/rtorrent/complete
    chmod 0775 /home/"${sUser}"/rtorrent/complete
    # /home/user/rtorrent/.session
    chown root:"${sUser}" /home/"${sUser}"/rtorrent/.session
    chmod 0771 /home/"${sUser}"/rtorrent/.session
    # /home/user/rtorrent/config.d
    # chown root:"${sUser}" /home/"${sUser}"/rtorrent/config.d
    # chmod 0771 /home/"${sUser}"/rtorrent/config.d
}

#### Seedbox-Manager Users Config
gfnManagerUsersConfigs() {
    local sUser sHomeDirEscaped sUserNameUpper

    if [ "${gbIsInstalled_Manager}" == "YES" ]; then
        sUser="$1"
        sHomeDirEscaped="$(echo /home/"${sUser}" | sed s,/,\\\\\/,g)"
        sUserNameUpper="$(echo "${sUser}" | tr '[:lower:]' '[:upper:]')"

        if [ ! -d "${gsManagerDir}/conf/users/${sUser}" ]; then mkdir -p "${gsManagerDir}/conf/users/${sUser}"; fi
        if [ ! -f "$gsManagerDir/conf/users/${sUser}/config.ini" ]; then
            install -o www-data -g www-data -m 0640 "${MySB_InstallDir}"/templates/manager/config.ini.tmpl "$gsManagerDir/conf/users/${sUser}/config.ini"
            sed -i "s/<user_directory>/${sHomeDirEscaped}/g;" "$gsManagerDir/conf/users/${sUser}/config.ini"
            sed -i "s/<scgi_folder>/\/${sUserNameUpper}/g;" "$gsManagerDir/conf/users/${sUser}/config.ini"
            sed -i "s/port_ftp = 21/port_ftp = ${gsPort_FTP}/g;" "$gsManagerDir/conf/users/${sUser}/config.ini"
            sed -i "s/port_sftp = 22/port_sftp = ${gsPort_SSH}/g;" "$gsManagerDir/conf/users/${sUser}/config.ini"
            sed -i "s/<mail_address>/${gsMainUserEmail}/g;" "$gsManagerDir/conf/users/${sUser}/config.ini"
            if [ "${gsMainUserName}" == "${sUser}" ]; then
                sed -i "s/admin = no/admin = yes/g;" "$gsManagerDir/conf/users/${sUser}/config.ini"
            fi
            case "${EnvLang}" in
                "fr") perl -pi -e "s/<lang>/${EnvLang}/g" "$gsManagerDir/conf/users/${sUser}/config.ini" ;;
                "en") perl -pi -e "s/<lang>/${EnvLang}/g" "$gsManagerDir/conf/users/${sUser}/config.ini" ;;
            esac
        fi
    fi
}

#### ruTorrent Users Config and Plugins
gfnRuTorrentUsersConfigs() {
    local sPluginsList sUser sUserValues sPortSCGI sHomeDir sHomeDirEscaped sUserUpper sPlugin bIsActive bVerbose

    [ "${gbDevMode}" -eq 1 ] && bVerbose=1 || bVerbose=0
    [ -d "${gsRutorrentPluginsDir}" ] && sPluginsList=$(ls -1r "${gsRutorrentPluginsDir}"/) || return 0
    sUser="$1"
    sUserValues="$(cmdMySQL 'MySB_db' "SELECT scgi_port,home_dir FROM users WHERE users_ident='${sUser}';" | sed 's/\t/|/g;')"
    sPortSCGI="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[1]}')"
    sHomeDir="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[2]}')"
    sHomeDirEscaped="$(echo "${sHomeDir}" | sed s,/,\\\\\/,g)"
    sUserUpper="$(echo "${sUser}" | tr '[:lower:]' '[:upper:]')"

    # share
    if [ ! -d "${gsRutorrentDir}/share/users/${sUser}/settings/" ]; then mkdir -p "${gsRutorrentDir}/share/users/${sUser}/settings/"; fi
    if [ ! -d "${gsRutorrentDir}/share/users/${sUser}/torrents/" ]; then mkdir -p "${gsRutorrentDir}/share/users/${sUser}/torrents/"; fi
    if [ ! -f "${gsRutorrentDir}/share/users/${sUser}/settings/uisettings.json" ]; then
        install -o www-data -g www-data -m 0666 "${MySB_InstallDir}"/templates/rutorrent/uisettings.json.tmpl "${gsRutorrentDir}/share/users/${sUser}/settings/uisettings.json"
    fi

    # conf
    if [ ! -d "${gsRutorrentDir}/conf/users/${sUser}/" ]; then mkdir -p "${gsRutorrentDir}/conf/users/${sUser}/"; fi
    install -o www-data -g www-data -m 0755 "${MySB_InstallDir}"/templates/rutorrent/config.php.tmpl "${gsRutorrentDir}/conf/users/${sUser}/config.php"
    perl -pi -e "s/<topDirectory>/${sHomeDirEscaped}/g" "${gsRutorrentDir}/conf/users/${sUser}/config.php"
    perl -pi -e "s/<log_file>/${sHomeDirEscaped}\/logs\/rutorrent.log/g" "${gsRutorrentDir}/conf/users/${sUser}/config.php"
    perl -pi -e "s/<RPC>/${sUserUpper}/g" "${gsRutorrentDir}/conf/users/${sUser}/config.php"
    perl -pi -e "s/<scgi_port>/${sPortSCGI}/g" "${gsRutorrentDir}/conf/users/${sUser}/config.php"
    perl -pi -e "s/<user>/${sUser}/g" "${gsRutorrentDir}/conf/users/${sUser}/config.php"
    # if [ -f "${gsRutorrentDir}"/conf/access.ini ]; then cp "${gsRutorrentDir}"/conf/access.ini "${gsRutorrentDir}/conf/users/${sUser}/access.ini"; fi
    install -o www-data -g www-data -m 0755 "${MySB_InstallDir}"/templates/rutorrent/access.ini.tmpl "${gsRutorrentDir}/conf/users/${sUser}/access.ini"
    install -o www-data -g www-data -m 0755 "${MySB_InstallDir}"/templates/rutorrent/plugins.ini.tmpl "${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
    # chown :www-data "${sHomeDir}/logs/rutorrent.log"

    for sPlugin in ${sPluginsList}; do
        bIsActive="$(cmdMySQL 'MySB_db' "SELECT active FROM repositories WHERE dir LIKE '%/${sPlugin}';")"
        [ -z "${bIsActive}" ] && bIsActive=0

        if [ -d "${gsRutorrentPluginsDir}/${sPlugin}" ]; then
            if [ -f "${gsRutorrentPluginsDir}/${sPlugin}/conf.php" ] || [ -f "${gsRutorrentPluginsDir}/${sPlugin}/config.php" ]; then
                case ${sPlugin} in
                    'linkseedboxmanager')
                        if [[ ${bIsActive} -eq 0 ]] && [ "${gbIsInstalled_Manager}" == "NO" ] && [ "${gbToInstall_Manager}" == "NO" ]; then
                            gfnDeleteDirectory ${bVerbose} "${gsRutorrentDir}/conf/users/${sUser}/plugins/${sPlugin}"
                            gfnDeleteDirectory ${bVerbose} "${gsRutorrentPluginsDir}/${sPlugin}"
                        else
                            echo "[${sPlugin}]" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                            echo "enabled = user-defined" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                        fi
                        ;;
                    'linkcakebox')
                        if [[ ${bIsActive} -eq 0 ]] && [ "${gbIsInstalled_Cakebox}" == "NO" ] && [ "${gbToInstall_Cakebox}" == "NO" ]; then
                            gfnDeleteDirectory ${bVerbose} "${gsRutorrentDir}/conf/users/${sUser}/plugins/${sPlugin}"
                            gfnDeleteDirectory ${bVerbose} "${gsRutorrentPluginsDir}/${sPlugin}"
                        else
                            echo "[${sPlugin}]" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                            echo "enabled = user-defined" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                        fi
                        ;;
                    'fileupload')
                        if [[ ${bIsActive} -eq 1 ]]; then
                            if [ ! -d "${gsRutorrentDir}/conf/users/${sUser}/fileupload/" ]; then
                                mkdir -p "${gsRutorrentDir}/conf/users/${sUser}/fileupload/"
                            fi
                            if [ -f "${gsRutorrentPluginsDir}/fileupload/conf.php" ] && [ ! -f "${gsRutorrentDir}/conf/users/${sUser}/fileupload/conf.php" ]; then
                                cp "${gsRutorrentPluginsDir}/fileupload/conf.php" "${gsRutorrentDir}/conf/users/${sUser}/fileupload/conf.php"
                            fi
                            echo "[${sPlugin}]" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                            echo "enabled = user-defined" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                        else
                            gfnDeleteDirectory ${bVerbose} "${gsRutorrentDir}/conf/users/${sUser}/plugins/${sPlugin}"
                            gfnDeleteDirectory ${bVerbose} "${gsRutorrentPluginsDir}/${sPlugin}"
                        fi
                        ;;
                    'fileshare')
                        if [[ ${bIsActive} -eq 1 ]]; then
                            echo "[${sPlugin}]" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                            echo "enabled = user-defined" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                        else
                            gfnDeleteDirectory ${bVerbose} "${gsRutorrentDir}/conf/users/${sUser}/plugins/${sPlugin}"
                            gfnDeleteDirectory ${bVerbose} "${gsRutorrentPluginsDir}/${sPlugin}"
                        fi
                        ;;
                    'diskspace')
                        if [ ! -d "${gsRutorrentDir}/conf/users/${sUser}/${sPlugin}" ]; then
                            mkdir -p "${gsRutorrentDir}/conf/users/${sUser}/${sPlugin}"
                        fi
                        if [ -f "${gsRutorrentPluginsDir}/${sPlugin}/conf.php" ] && [ ! -f "${gsRutorrentDir}/conf/users/${sUser}/${sPlugin}/conf.php" ]; then
                            cp "${gsRutorrentPluginsDir}/${sPlugin}/conf.php" "${gsRutorrentDir}/conf/users/${sUser}/${sPlugin}/conf.php"
                        fi
                        echo "[${sPlugin}]" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                        echo "enabled = user-defined" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                        ;;
                    '_cloudflare')
                        echo "[${sPlugin}]" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                        echo "enabled = off" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                        ;;
                    *)
                        # 3) Enable it for each user
                        if [[ ${bIsActive} -eq 1 ]]; then
                            echo "[${sPlugin}]" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                            echo "enabled = user-defined" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                        else
                            gfnDeleteDirectory ${bVerbose} "${gsRutorrentDir}/conf/users/${sUser}/plugins/${sPlugin}"
                        fi
                        ;;
                esac
            fi
        fi
    done

    chown -R www-data:www-data "${gsRutorrentDir}/conf/users/${sUser}/"
    chmod -R 0755 "${gsRutorrentDir}/conf/users/${sUser}/"
    find "${gsRutorrentDir}/conf/users/${sUser}/" -type f -print0 | xargs -0 chmod 0555
}

#### Manage user crontab
gfnUserCrontab() {
    local sUser sUserValues nIdUser sHomeDir sDirectories sCrontabValues sSyncDB sSubDirectory sSyncMode sDirectory sCron

    sUser="$1"
    sUserValues="$(cmdMySQL 'MySB_db' "SELECT id_users,home_dir FROM users WHERE users_ident='${sUser}';" | sed 's/\t/|/g;')"
    nIdUser="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[1]}')"
    sHomeDir="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[2]}')"
    sDirectories="$(cmdMySQL 'MySB_db' "SELECT sub_directory,sync_mode FROM users_rtorrent_cfg WHERE id_users='${nIdUser}';" | sed 's/\t/|/g;')"
    sCrontabValues="$(cmdMySQL 'MySB_db' "SELECT id_users_crontab,minutes,hours,days,months,numday,command FROM users_crontab WHERE id_users='${nIdUser}';" | sed 's/\t/|/g;')"
    sSyncDB="/home/${sUser}/db/${sUser}.sq3"
    if [ ! -f "${sSyncDB}" ]; then
        cp "${MySB_InstallDir}/db/Sync.tmpl.sq3" "${sSyncDB}"
        chmod -R 0770 "${sHomeDir}"/db
        chown -R $FnUser:www-data "${sHomeDir}"/db
    fi

    # echo "# Sync Mode for finished download" > "${sHomeDir}"/scripts/sync_mode
    # echo "# 0	-->	Do not start any script (no synchro)" >> "${sHomeDir}"/scripts/sync_mode
    # echo "# 1	-->	Execute scripts by crontab (*.cron)" >> "${sHomeDir}"/scripts/sync_mode
    # echo "# 2	-->	Execute scripts directly when a download is finished (*.sh)" >> "${sHomeDir}"/scripts/sync_mode
    sqlite3 -cmd '.timeout 150000' "$sSyncDB" "DELETE FROM categories;"
    for sDirectory in ${sDirectories}; do
        sSubDirectory="$(echo "${sDirectory}" | awk '{split($0,a,"|"); print a[1]}')"
        sSyncMode="$(echo "${sDirectory}" | awk '{split($0,a,"|"); print a[2]}')"
        sqlite3 -cmd '.timeout 150000' "$sSyncDB" "INSERT INTO categories (name,sync_mode) VALUES ('${sSubDirectory}','$sSyncMode');"
    done

    if [ -f "${sHomeDir}"/scripts/crontab ]; then
        rm -f "${sHomeDir}"/scripts/crontab
    fi
    if [ -n "$sCrontabValues" ]; then
        for sCron in $sCrontabValues; do
            nCronID="$(echo "$sCron" | awk '{split($0,a,"|"); print a[1]}')"
            sCronMinutes="$(echo "$sCron" | awk '{split($0,a,"|"); print a[2]}')"
            sCronHours="$(echo "$sCron" | awk '{split($0,a,"|"); print a[3]}')"
            sCronDays="$(echo "$sCron" | awk '{split($0,a,"|"); print a[4]}')"
            sCronMonths="$(echo "$sCron" | awk '{split($0,a,"|"); print a[5]}')"
            sCronNumday="$(echo "$sCron" | awk '{split($0,a,"|"); print a[6]}')"
            sCronCommand="$(echo "$sCron" | awk '{split($0,a,"|"); print a[7]}')"
            # Adding cron job only if script file is present
            if [ -f "${sHomeDir}/scripts/$sCronCommand" ]; then
                echo "$sCronMinutes $sCronHours $sCronDays $sCronMonths $sCronNumday /bin/bash ~/scripts/$sCronCommand > /dev/null 2>&1" >>"${sHomeDir}"/scripts/crontab
            else
                cmdMySQL 'MySB_db' "DELETE FROM users_crontab WHERE id_users_crontab='$nCronID' AND id_users='${nIdUser}';"
            fi
        done
        unset nCronID sCronMinutes sCronHours sCronDays sCronMonths sCronNumday sCronCommand
    else
        echo >"${sHomeDir}"/scripts/crontab
    fi
    if [ -f "${sHomeDir}"/scripts/crontab ]; then
        crontab -u "${sUser}" "${sHomeDir}"/scripts/crontab
        systemctl restart cron.service >/dev/null
        rm -f "${sHomeDir}"/scripts/crontab
    fi
}

#### rTorrent Configuration file
gfnCreateRtorrentConfigFile() {
    local sUser sUserValues sHomeDir sDirectories sSubDirectory sDirectory sFileSystemType sRev
    local bCanBeDeleted bCreateNewFile bToDelete bActiveUdp
    local nIdUser nPortSCGI nPortRtorrent nNumLine nCount nCountFiles

    [[ -n $1 ]] && sUser="$1" || return
    sFileSystemType="$(df -T "/home/" | awk '{print $2}' | tail -n1)"
    sUserValues="$(cmdMySQL 'MySB_db' "SELECT id_users,scgi_port,rtorrent_port,home_dir FROM users WHERE users_ident='${sUser}';" | sed 's/\t/|/g;')"
    nIdUser="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[1]}')"
    nPortSCGI="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[2]}')"
    nPortRtorrent="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[3]}')"
    sHomeDir="$(echo "${sUserValues}" | awk '{split($0,a,"|"); print a[4]}')"
    [[ -z ${sHomeDir} ]] && sHomeDir="/home/${sUser}"
    sDirectories="$(cmdMySQL 'MySB_db' "SELECT sub_directory,can_be_deleted,to_delete FROM users_rtorrent_cfg WHERE id_users='${nIdUser}';" | sed 's/\t/|/g;')"

    bCreateNewFile=1
    # if [ "$2" == "force" ] || [ ! -f "${sHomeDir}/.rtorrent.rc" ] || [ ! -s "${sHomeDir}/.rtorrent.rc" ]; then
    #     bCreateNewFile=1
    # else
    #     bCreateNewFile=0
    # fi

    # Sub-Directories
    if [ -n "${sDirectories}" ]; then
        for sDirectory in ${sDirectories}; do
            sSubDirectory="$(echo "${sDirectory}" | awk '{split($0,a,"|"); print a[1]}')"
            bCanBeDeleted="$(echo "${sDirectory}" | awk '{split($0,a,"|"); print a[2]}')"
            bToDelete="$(echo "${sDirectory}" | awk '{split($0,a,"|"); print a[3]}')"

            install -o "${sUser}" -g MySB_users -m 0755 -d "${sHomeDir}/rtorrent/complete/${sSubDirectory}/"
            install -o "${sUser}" -g MySB_users -m 0775 -d "${sHomeDir}/rtorrent/watch/${sSubDirectory}/"
            install -o "${sUser}" -g MySB_users -m 0755 -d "${sHomeDir}/rtorrent/torrents/${sSubDirectory}/"
            echo "FORCE WATCH SYNC WITH SMARTPHONE CLIENT" >"${sHomeDir}/rtorrent/watch/${sSubDirectory}/.gitkeep"
            chown www-data:www-data "${sHomeDir}/rtorrent/watch/${sSubDirectory}/.gitkeep"

            if [ -d "${sHomeDir}/rtorrent/complete/${sSubDirectory}/" ]; then
                nCountFiles="$(find "${sHomeDir}/rtorrent/complete/${sSubDirectory}/" -maxdepth 1 -mindepth 1 | wc -l)"
                if [ "$nCountFiles" -eq 0 ]; then
                    cmdMySQL 'MySB_db' "UPDATE users_rtorrent_cfg SET can_be_deleted='1' WHERE id_users='${nIdUser}' AND sub_directory='${sSubDirectory}';"
                    bCanBeDeleted=1
                else
                    cmdMySQL 'MySB_db' "UPDATE users_rtorrent_cfg SET can_be_deleted='0' WHERE id_users='${nIdUser}' AND sub_directory='${sSubDirectory}';"
                    bCanBeDeleted=0
                fi
            fi

            case "${bCanBeDeleted}" in
                1) # New directory OR maybe to delete
                    case "${bToDelete}" in
                        1)
                            rm -rf "${sHomeDir}/rtorrent/complete/${sSubDirectory}/"
                            rm -rf "${sHomeDir}/rtorrent/watch/${sSubDirectory}/"
                            if [ -d "${sHomeDir}/rtorrent/torrents/${sSubDirectory}/" ]; then
                                mv -f "${sHomeDir}/rtorrent/torrents/${sSubDirectory}"/*.torrent "${sHomeDir}"/rtorrent/torrents/
                                rm -rf "${sHomeDir}/rtorrent/torrents/${sSubDirectory}/"
                            fi
                            cmdMySQL 'MySB_db' "DELETE FROM users_rtorrent_cfg WHERE id_users='${nIdUser}' AND sub_directory='${sSubDirectory}';"
                            bCreateNewFile=1
                            ;;
                        0)
                            install -o "${sUser}" -g MySB_users -m 0755 -d "${sHomeDir}/rtorrent/complete/${sSubDirectory}/"
                            install -o "${sUser}" -g MySB_users -m 0775 -d "${sHomeDir}/rtorrent/watch/${sSubDirectory}/"
                            install -o "${sUser}" -g MySB_users -m 0755 -d "${sHomeDir}/rtorrent/torrents/${sSubDirectory}/"
                            bCreateNewFile=1
                            ;;
                    esac
                    ;;
            esac
        done
    fi

    # Crontab & sync mode
    gfnUserCrontab "${sUser}"

    # .rTorrent_inserted_new.sh
    install -o root -g "${sUser}" -m 0750 "${MySB_InstallDir}"/templates/rtorrent/rtorrent_inserted_new.sh.tmpl "${sHomeDir}"/.rTorrent_inserted_new.sh
    perl -pi -e "s/<scgi_port>/${nPortSCGI}/g" "${sHomeDir}"/.rTorrent_inserted_new.sh
    perl -pi -e "s/<MySB_InstallDir>/${gsInstallDirEscaped}/g" "${sHomeDir}"/.rTorrent_inserted_new.sh

    # .rTorrent_finished.sh
    install -o root -g "${sUser}" -m 0750 "${MySB_InstallDir}"/templates/rtorrent/rtorrent_finished.sh.tmpl "${sHomeDir}"/.rTorrent_finished.sh
    perl -pi -e "s/<scgi_port>/${nPortSCGI}/g" "${sHomeDir}"/.rTorrent_finished.sh

    # .rTorrent_erased.sh
    install -o root -g "${sUser}" -m 0750 "${MySB_InstallDir}"/templates/rtorrent/rTorrent_erased.sh.tmpl "${sHomeDir}"/.rTorrent_erased.sh

    # .rTorrent_tasks.sh
    install -o root -g root -m 0750 "${MySB_InstallDir}"/templates/rtorrent/rTorrent_tasks.sh.tmpl "${sHomeDir}"/.rTorrent_tasks.sh
    perl -pi -e "s/<InstallDir>/${gsInstallDirEscaped}/g" "${sHomeDir}"/.rTorrent_tasks.sh
    perl -pi -e "s/<user>/${sUser}/g" "${sHomeDir}"/.rTorrent_tasks.sh

    # Example scripts
    install -o root -g "${sUser}" -m 0750 "${MySB_InstallDir}"/templates/rtorrent/synchro.sh.tmpl "${sHomeDir}"/scripts/synchro.sh
    echo "${Global_Readme_AvailableVariables[@]}" >/home/"${sUser}"/scripts/README
    chown "${sUser}":"${sUser}" "${sHomeDir}"/scripts/*
    chmod 0770 "${sHomeDir}"/scripts/*
    dos2unix "${sHomeDir}"/scripts/* &>/dev/null

    if [[ ${bCreateNewFile} -eq 1 ]]; then
        # .rtorrent.rc
        if [ -f "${sHomeDir}"/.rtorrent.rc ]; then
            mv "${sHomeDir}"/.rtorrent.rc "${sHomeDir}"/.rtorrent.rc.old
        fi
        install -o root -g "${sUser}" -m 0740 "${MySB_InstallDir}"/templates/rtorrent/rtorrent.rc.tmpl "${sHomeDir}"/.rtorrent.rc
        perl -pi -e "s/<InstallDir>/${gsInstallDirEscaped}/g" "${sHomeDir}"/.rtorrent.rc
        # perl -pi -e "s/<bind_address>/${gsSrvIpAddressExt}/g" "${sHomeDir}"/.rtorrent.rc
        perl -pi -e "s/<local_address>/${gsSrvIpAddress}/g" "${sHomeDir}"/.rtorrent.rc
        perl -pi -e "s/<username>/${sUser}/g" "${sHomeDir}"/.rtorrent.rc
        perl -pi -e "s/<homedir>/\/home\/${sUser}/g" "${sHomeDir}"/.rtorrent.rc
        perl -pi -e "s/<scgi_port>/${nPortSCGI}/g" "${sHomeDir}"/.rtorrent.rc
        perl -pi -e "s/<port_range>/${nPortRtorrent}-${nPortRtorrent}/g" "${sHomeDir}"/.rtorrent.rc
        if [ "${gsMySB_PeerBlock}" == "rTorrent" ]; then
            perl -pi -e "s/#{1}ipv4_filter.load/ipv4_filter.load/g" "${sHomeDir}"/.rtorrent.rc
            perl -pi -e "s/#{1}print/print/g" "${sHomeDir}"/.rtorrent.rc
            perl -pi -e "s/#{1}schedule2=load_filter/schedule2=load_filter/g" "${sHomeDir}"/.rtorrent.rc
        fi

        # UDP ?
        bActiveUdp="$(cmdMySQL 'MySB_db' "SELECT annoncers_udp FROM system WHERE id_system='1';")"
        if [ "${bActiveUdp}" -eq 1 ]; then
            perl -pi -e "s/^trackers.use_udp.set = no/trackers.use_udp.set = yes/g" "${sHomeDir}"/.rtorrent.rc
            perl -pi -e "s/^trackers.use_udp.set = 0/trackers.use_udp.set = 1/g" "${sHomeDir}"/.rtorrent.rc
        else
            perl -pi -e "s/^trackers.use_udp.set = yes/trackers.use_udp.set = no/g" "${sHomeDir}"/.rtorrent.rc
            perl -pi -e "s/^trackers.use_udp.set = 1/trackers.use_udp.set = 0/g" "${sHomeDir}"/.rtorrent.rc
        fi

        # network.http.ssl_verify_host.set
        # rTorrentVersion="$(cmdMySQL 'MySB_db' "SELECT rtorrent_version FROM users WHERE users_ident='${sUser}';")"
        # case "$rTorrentVersion" in
        #     "v0.9.6") sed -i '/network.http.ssl_verify_host.set/d' "${sHomeDir}"/.rtorrent.rc ;;
        # esac

        # pieces.memory.max.set
        gfnListCountUsers 'normal'
        for seedUser in ${gsUsersList}; do
            nPiecesMemoryMax="$((gsMemory / 5))M"
            nNumLine=$(grep 'pieces.memory.max.set' -n -m 1 /home/${seedUser}/.rtorrent.rc | cut -d ':' -f 1)
            sed -i '/pieces.memory.max.set/d' /home/"${seedUser}"/.rtorrent.rc
            sed -i "${nNumLine}i\pieces.memory.max.set = ${nPiecesMemoryMax};" /home/"${seedUser}"/.rtorrent.rc
        done

        case "${sFileSystemType}" in
            "ext4" | "xfs" | "btrfs") perl -pi -e "s/system.file.allocate.set = no/system.file.allocate.set = yes/g" "${sHomeDir}"/.rtorrent.rc ;;
            *) perl -pi -e "s/^system.file.allocate.set = yes/system.file.allocate.set = no/g" "${sHomeDir}"/.rtorrent.rc ;;
        esac

        # Remove commented lines
        sRev="$(grep ' rev ' "${MySB_InstallDir}"/templates/rtorrent/rtorrent.rc.tmpl)"
        sed -i '/^#/d' "${sHomeDir}"/.rtorrent.rc
        sed -i "1i\\\\${sRev}" "${sHomeDir}"/.rtorrent.rc
        # Delete empty lines
        sed -i '/^$/d' "${sHomeDir}"/.rtorrent.rc

        # Watch directories
        if [ -n "${sDirectories}" ]; then
            nNumLine=$(sed -n "/watch_directory/=" "${sHomeDir}"/.rtorrent.rc)
            nCount=0
            sed -i '/watch_directory/d' "${sHomeDir}"/.rtorrent.rc
            sed -i "${nNumLine}i\schedule2 = watch_directory_${nCount},5,5,\"load.normal=~\/rtorrent\/watch\/*.torrent,d.directory.set=~\/rtorrent\/complete\/,d.custom1.set=,d.custom2.set=~\/rtorrent\/torrents\/\"" "${sHomeDir}"/.rtorrent.rc
            ((nNumLine++)) && ((nCount++))
            for sDirectory in ${sDirectories}; do
                sDirectory="$(echo "${sDirectory}" | awk '{split($0,a,"|"); print a[1]}')"
                sed -i "${nNumLine}i\schedule2 = watch_directory_${nCount},5,5,\"load.normal=~\/rtorrent\/watch\/${sDirectory}\/*.torrent,d.directory.set=~\/rtorrent\/complete\/${sDirectory}\/,d.custom1.set=${sDirectory},d.custom2.set=~\/rtorrent\/torrents\/${sDirectory}\/\"" "${sHomeDir}"/.rtorrent.rc
                ((nNumLine++)) && ((nCount++))
            done

            # Disabling 'autotools' plugins
            if [ -f "${gsRutorrentDir}/conf/users/${sUser}/plugins.ini" ]; then
                nNumLine=$(sed -n "/\[autotools\]/=" "${gsRutorrentDir}/conf/users/${sUser}/plugins.ini")
                sed -i "${nNumLine}d" "${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                sed -i "${nNumLine}d" "${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                echo "[autotools]" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                echo "enabled = off" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
            fi
            if [ -f "${gsRutorrentDir}/share/users/${sUser}/settings/autotools.dat" ]; then
                mv "${gsRutorrentDir}/share/users/${sUser}/settings/autotools.dat" "${gsRutorrentDir}/share/users/${sUser}/settings/autotools.dat.bak"
            fi
        else
            # Enabling 'autotools' plugins
            if [ -f "${gsRutorrentDir}/conf/users/${sUser}/plugins.ini" ]; then
                nNumLine=$(sed -n "/\[autotools\]/=" "${gsRutorrentDir}/conf/users/${sUser}/plugins.ini")
                sed -i "${nNumLine}d" "${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                sed -i "${nNumLine}d" "${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                echo "[autotools]" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
                echo "enabled = user-defined" >>"${gsRutorrentDir}/conf/users/${sUser}/plugins.ini"
            fi
            if [ -f "${gsRutorrentDir}/share/users/${sUser}/settings/autotools.dat.bak" ]; then
                mv "${gsRutorrentDir}/share/users/${sUser}/settings/autotools.dat.bak" "${gsRutorrentDir}/share/users/${sUser}/settings/autotools.dat"
            fi
        fi
    fi
}

#### Monthly payment
gfnMonthlyPayment() {
    local sUser dYear dMonth dToday sMailSubject sCase sMessage
    local nIdUser nCreateNewPeriodPrice nNewMonth nUpdateCurrentPeriodPrice nSendMail
    local dCurrentEndOfUse dPreviousYear dPreviousMonth nLength dStartOfUse dEndOfUse sNewValues
    local sRentStatusValues nSumPeriodCost nSumAlreadyPayed nUserTreasury
    local dFirstDate dFirstMonth dFirstYear dFirstDay dLastMonth dEndOfLastMonth nNbMonths dCurrentYear dCurrentMonth

    if [ -n "$1" ] &&
        [ -n "${gsRentingTVA}" ] &&
        [ -n "${gsRentingModel}" ] &&
        [ "${gsRentingGlobalCost}" != "0.00" ] &&
        [ "${gsRentingCostTva}" != "0.00" ]; then

        # VARs
        sUser="$1"
        dYear="$(date +%Y)"
        dMonth="$(date +%m)"
        dToday="$(date +%d)"
        gfnListCountUsers 'all'

        for SeedboxUser in ${gsUsersList}; do
            nIdUser="$(cmdMySQL 'MySB_db' "SELECT id_users FROM users WHERE users_ident='${SeedboxUser}';")"
            nCreateNewPeriodPrice=0
            nNewMonth=0
            nUpdateCurrentPeriodPrice=0
            nSendMail=0

            case "${gsScriptName}" in
                PaymentReminder.bsh)
                    case "$dToday" in
                        '01')
                            dCurrentEndOfUse="$(cmdMySQL 'MySB_db' "SELECT end_of_use FROM tracking_rent_history WHERE id_users='${nIdUser}' AND year='$dYear' AND month='$dMonth' ORDER BY id_tracking_rent_history DESC LIMIT 1;")"

                            if [ "$dCurrentEndOfUse" != "$dToday" ]; then
                                dPreviousYear=$dYear
                                dPreviousMonth=$dMonth
                                case "$dMonth" in
                                    '01')
                                        ((dPreviousYear--))
                                        dPreviousMonth="12"
                                        ;;
                                    *)
                                        ((dPreviousMonth--))
                                        nLength=${#dPreviousMonth}
                                        case "$nLength" in
                                            1) dPreviousMonth="0$dPreviousMonth" ;;
                                        esac
                                        ;;
                                esac
                                dYear="$dPreviousYear"
                                dMonth="$dPreviousMonth"
                                dStartOfUse="$dToday"
                                dEndOfUse="$(date -d "$dYear-$dMonth-01 +1 month -1 day" +%d)"
                                sNewValues="end_of_use='$dEndOfUse'"
                                dEndOfUse="$dToday"
                                nUpdateCurrentPeriodPrice=1
                                nCreateNewPeriodPrice=1
                                nNewMonth=1
                                sMailSubject="${Global_Subject_PaymentReminder} ${SeedboxUser}"
                                sCase="renting"
                                sMessage="Payment Reminder"
                                nSendMail=1
                            fi
                            ;;
                        *)
                            sNewValues="end_of_use='$dToday'"
                            nUpdateCurrentPeriodPrice=1
                            ;;
                    esac
                    ;;
                MySB_CreateUser)
                    if [ "${sUser}" != "${SeedboxUser}" ]; then
                        # DO NOT send email about new monthly for the new user.
                        # DO NOT create new entries for renting for the new user.
                        sMailSubject="${Global_Subject_MonthlyPayment} [${SeedboxUser}]"
                        sCase="new_user"
                        sMessage="${CreateUser_MessageAccountChangeMonthly}"

                        StartEnd="$(cmdMySQL 'MySB_db' "SELECT start_of_use,end_of_use FROM tracking_rent_history WHERE id_users='${nIdUser}' AND year='$dYear' AND month='$dMonth' ORDER BY id_tracking_rent_history DESC LIMIT 1;" | sed 's/\t/|/g;')"
                        dStartOfUse="$(echo "$StartEnd" | awk '{split($0,a,"|"); print a[1]}')"
                        dEndOfUse="$(echo "$StartEnd" | awk '{split($0,a,"|"); print a[2]}')"
                        if [ "$dStartOfUse" -eq "$dEndOfUse" ]; then
                            # Update existing period without creating a new one (start_of_use = end_of_use)
                            sNewValues="nb_users='$gnTotalUsers',end_of_use='$dToday'"
                        else
                            # End Of Use for current period (-1 day)
                            dEndOfUse="$(date -d "$dYear-$dMonth-$dToday -1 day" +%d)"
                            sNewValues="end_of_use='$dEndOfUse'"
                            # End Of Use for new period (today)
                            nCreateNewPeriodPrice=1
                            dStartOfUse="$dToday"
                            dEndOfUse="$dToday"
                        fi
                        nUpdateCurrentPeriodPrice=1
                        nSendMail=1
                    else
                        nSendMail=1
                        dStartOfUse="$dToday"
                        dEndOfUse="$dToday"
                        sMailSubject="${CreateUser_SubjectAccountCreated} [${SeedboxUser}]"
                        sCase="account_created"
                        sMessage="${CreateUser_MessageAccountCreated}"
                        # ICI, traitement pour l'ajout d'un nouvel utilisateur.
                        # 1/	On ajoute une entrée dans 'tracking_rent_status'.
                        cmdMySQL 'MySB_db' "INSERT INTO tracking_rent_status (id_users) VALUES ('${nIdUser}');"

                        # 2/	On ajoute maintenant une entrée dans 'tracking_rent_history'.
                        #		==> Utilisation du trigger 'PeriodPrice_OnInsert' pour renseigner certains champs.
                        cmdMySQL 'MySB_db' "INSERT INTO tracking_rent_history (id_users,monthly_price,nb_users,start_of_use,end_of_use) VALUES ('${nIdUser}','$gsRentingCostTva','$gnTotalUsers','$dToday','$dEndOfUse');"
                    fi
                    ;;
                MySB_DeleteUser)
                    # Servira à envoyer un récapitulatif à l'utilisateur, comme le montant de sa dette par exemple.
                    if [ "${sUser}" != "${SeedboxUser}" ]; then
                        sMailSubject="$Global_Subject_MonthlyPayment [${SeedboxUser}]"
                        sCase="renting"
                        sMessage="$CreateUser_MessageAccountChangeMonthly"
                        dStartOfUse="$dToday"
                        dEndOfUse="$dToday"
                        sNewValues="end_of_use='$dEndOfUse'"
                        nUpdateCurrentPeriodPrice=1
                        nCreateNewPeriodPrice=1
                        nSendMail=1
                    else
                        nSendMail=1
                        sMailSubject="${DeleteUser_SubjectDelete} [${SeedboxUser}]"
                        sCase="delete_user"
                        sMessage="${DeleteUser_MessageDelete}"
                    fi
                    ;;
                BulkChanges.bsh)
                    # On crée un historique depuis la date de création du dernier utilisateur.
                    # Quelle est la dadte d'ajout ddu dernier utilisateur ?
                    dFirstDate="$(cmdMySQL 'MySB_db' "SELECT max(created_at) FROM users;")"
                    dFirstMonth="$(date -d "$dFirstDate" '+%m')"
                    dFirstYear="$(date -d "$dFirstDate" '+%Y')"
                    dFirstDay="$(date -d "$dFirstDate" '+%Y-%m-%d')"
                    dStartOfUse="$(date -d "$dFirstDate" '+%d')"
                    dEndOfUse="$(date -d "$dFirstDate" '+%Y-%m')"
                    dEndOfUse="$(date -d "$dEndOfUse-01 +1 month -1 day" +%d)"

                    # Quel est le mois précédent à ajourd'hui ? Et son dernier jour ?
                    dLastMonth="$(date +'%Y-%m' -d 'last month')"
                    dEndOfLastMonth="$(date -d "$dLastMonth-01 +1 month -1 day" +%Y-%m-%d)"
                    # Combien de mois se sont écoulés entre ces 2 dates ?
                    local Y M
                    Y=$(date -d@$(($(date -ud "$dEndOfLastMonth" +'%s') - $(date -ud "$dFirstDate" +'%s'))) +'%Y')
                    M=$(date -d@$(($(date -ud "$dEndOfLastMonth" +'%s') - $(date -ud "$dFirstDate" +'%s'))) +'%m')
                    nNbMonths=$(((($(echo "$Y" | sed -r 's/^([0-9]+).*/\1/') - 1970) * 12) + M))
                    # Maintenant on peut créer autant d'entrées dans l'historique que de nombre de mois.
                    cmdMySQL 'MySB_db' "DELETE FROM tracking_rent_status WHERE id_users='${nIdUser}';"
                    cmdMySQL 'MySB_db' "DELETE FROM tracking_rent_history WHERE id_users='${nIdUser}';"
                    cmdMySQL 'MySB_db' "UPDATE users SET treasury='0.00' WHERE id_users='${nIdUser}';"
                    for ((i = 1; i <= nNbMonths; i++)); do
                        if [ $i -eq $nNbMonths ]; then
                            dCurrentYear="$dYear"
                            dCurrentMonth="$dMonth"
                            dEndOfUse="$dToday"
                        else
                            dCurrentYear="$(date -d "$dFirstDay" '+%Y')"
                            dCurrentMonth="$(date -d "$dFirstDay" '+%m')"
                        fi
                        cmdMySQL 'MySB_db' "INSERT INTO tracking_rent_status (id_users,year,month) VALUES ('${nIdUser}','$dCurrentYear','$dCurrentMonth');"
                        cmdMySQL 'MySB_db' "INSERT INTO tracking_rent_history (id_users,year,month,monthly_price,nb_users,start_of_use,end_of_use) VALUES ('${nIdUser}','$dCurrentYear','$dCurrentMonth','$gsRentingCostTva','$gnTotalUsers','$dStartOfUse','$dEndOfUse');"

                        # New first day of period (month)
                        dFirstDay="$(date -d "$dFirstYear-$dFirstMonth-01 +$i month" +%Y-%m-%d)"
                        dStartOfUse="01"
                        dEndOfUse="$(date -d "$dFirstDay" '+%Y-%m')"
                        dEndOfUse="$(date -d "$dEndOfUse-01 +1 month -1 day" +%d)"
                    done
                    if [ "${nIdUser}" == "${gnMainUserId}" ]; then
                        cmdMySQL 'MySB_db' "UPDATE tracking_rent_status SET already_payed='9999.99' WHERE id_users='${nIdUser}';"
                    fi
                    ;;
            esac

            if [ ${nUpdateCurrentPeriodPrice} -eq 1 ]; then
                # 1/ Clôture du mois précédent OU d'une période suite à l'ajout d'un user dans:
                #		- modification de 'tracking_rent_history' en modifiant le champs 'end_of_use' à la date du jour
                #		==> Utilisation d'un trigger sur UPDATE pour calculer le prix de la période
                #		- modification de 'tracking_rent_status'
                cmdMySQL 'MySB_db' "UPDATE tracking_rent_history SET $sNewValues WHERE id_users='${nIdUser}' AND year='$dYear' AND month='$dMonth' ORDER BY id_tracking_rent_history DESC LIMIT 1;"
                if [ "${nIdUser}" == "${gnMainUserId}" ]; then
                    cmdMySQL 'MySB_db' "UPDATE tracking_rent_status SET already_payed='9999.99' WHERE id_users='${nIdUser}' AND year='$dYear' AND month='$dMonth';"
                fi
            fi

            if [ ${nNewMonth} -eq 1 ]; then
                # 2/ Ajout du nouveau mois:
                cmdMySQL 'MySB_db' "INSERT INTO tracking_rent_status (id_users) VALUES ('${nIdUser}');"
            fi

            if [ ${nCreateNewPeriodPrice} -eq 1 ]; then
                # 3/ Ajout d'une nouvelle période prix (nouveau mois OU changement du nombre d'utilisateur)
                cmdMySQL 'MySB_db' "INSERT INTO tracking_rent_history (id_users,monthly_price,nb_users,start_of_use,end_of_use) VALUES ('${nIdUser}','$gsRentingCostTva','$gnTotalUsers','$dStartOfUse','$dEndOfUse');"
                if [ "${nIdUser}" == "${gnMainUserId}" ]; then
                    cmdMySQL 'MySB_db' "UPDATE tracking_rent_status SET already_payed='9999.99' WHERE id_users='${nIdUser}' AND year='$dYear' AND month='$dMonth';"
                fi
            fi

            if [ ${nSendMail} -eq 1 ]; then
                # Send email for all users
                gfnSendMail "$sMailSubject" "${SeedboxUser}" "$sCase" "${sMessage}"
            fi
        done

        # Update treasury for the main user
        sRentStatusValues="$(cmdMySQL 'MySB_db' "SELECT sum(period_cost), sum(already_payed) FROM tracking_rent_status WHERE id_users!='${gnMainUserId}' AND already_payed!=period_cost;" | sed 's/\t/|/g;')"
        nSumPeriodCost="$(echo "$sRentStatusValues" | awk '{split($0,a,"|"); print a[1]}')"
        nSumAlreadyPayed="$(echo "$sRentStatusValues" | awk '{split($0,a,"|"); print a[2]}')"
        nUserTreasury=$(echo "($nSumAlreadyPayed - $nSumPeriodCost)" | bc)
        cmdMySQL 'MySB_db' "UPDATE users SET treasury='$nUserTreasury' WHERE id_users='${gnMainUserId}';"
    fi
}

##################### LAST LINE ######################################
