#!/bin/bash
# rev 0.12
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
# t.type:               1: http / 2: udp
##################### FIRST LINE #####################################

# ARGS: $d.hash=,$d.name=,$d.directory=,$d.loaded_file=,$d.custom2=,$d.custom1=

#### VARs - From .rtorrent.rc config file
sInfoHash="${1}"      # $d.hash=
sName="${2}"          # $d.name=
sDirectory="${3}"     # $d.directory=
sTorrentLoaded="${4}" # $d.loaded_file=
sTorrentDir="${5}"    # $d.custom2=
sLabel="${6}"         # $d.custom1=

#### VARs - Default sets
sName="${sName//\'/\\\'}"
isStart=1
# isAddPath=1
saveTorrent=1
# isFast=0
nContinue=0
nExit=0
sCpParams=()
sUserName="$(whoami)"
nCgiPort="<scgi_port>"
dTimestamp="$(date +%Y/%m/%d\ %H:%M:%S)"
sScriptName="$(basename "$0")"
sLogFile="$(mktemp /tmp/"${sUserName}".XXXXXXXXXX)"
sSqlParams=('--defaults-extra-file=/home/.config.cnf' '--database=MySB_db' '-w' '--connect-timeout=10' '-s' '-N')

# Torrent file uploaded via ruTorrent ?
if [ -z "${sTorrentLoaded}" ] && [ -n "${sTorrentDir}" ]; then
    urldecode() {
        : "${*//+/ }"
        echo -e "${_//%/\\x}"
    }
    sTorrentDir="$(urldecode "${sTorrentDir}")"
    if [ -f "${sTorrentDir}" ]; then
        [ -z "${sLabel}" ] && sLabel="$(xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom1 "${sInfoHash}" 2>/dev/null)"
        isStart="$(xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom5 "${sInfoHash}" 2>/dev/null | cut -d ':' -f 1)"
        # isAddPath="$(xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom5 "${sInfoHash}" 2>/dev/null | cut -d ':' -f 2)"
        saveTorrent="$(xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom5 "${sInfoHash}" 2>/dev/null | cut -d ':' -f 3)"
        # isFast="$(xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom5 "${sInfoHash}" 2>/dev/null | cut -d ':' -f 4)"
        sTorrentLoaded="${sTorrentDir}"
        sTorrentDir="/home/${sUserName}/rtorrent/torrents/"
        [ -n "${sLabel}" ] && sTorrentDir="${sTorrentDir%/}/${sLabel}/"
    fi
fi

sTorrentFile="${sTorrentDir%/}/$(basename "${sTorrentLoaded}")"
(grep -q 'dummy' <<<"${sTorrentFile}") && sTorrentFile="${sTorrentDir%/}/${sName}.torrent"
(grep -q "${sName}" <<<"${sDirectory}") && sFinalDirectory="${sDirectory}" || sFinalDirectory="${sDirectory%/}/${sName}"

#### Do some checks before
[ -z "${sInfoHash}" ] && nExit=1
[ -z "${sName}" ] && nExit=2
[ -z "${sDirectory}" ] && nExit=3
{ [ -z "${sTorrentLoaded}" ] || [ ! -f "${sTorrentLoaded}" ]; } && nExit=4
{ [ -z "${sTorrentDir}" ] || [ ! -d "${sTorrentDir}" ]; } && nExit=5

#### VARs
[ -f "${sTorrentLoaded}" ] && sPrivacy="$(transmission-show "${sTorrentLoaded}" | grep -m 1 'Privacy: ' | awk '{printf $2}' | tr '[:upper:]' '[:lower:]')"
sRequestValues="$(mysql "${sSqlParams[@]}" -e "SELECT public_tracker_allow,files_recycling,annoncers_udp,annoncers_check FROM system WHERE id_system='1';" | sed 's/\t/|/g;')"
sTrackerModeAllowed="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[1]}')"
sFilesRecycling="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[2]}')"
bAnnoncersUdp="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[3]}')"
bAnnoncersCheck="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[4]}')"

#### Language
case "${LANG:0:2}" in
    "fr")
        sMessPrivacyPrivate=("Priv&eacute;s seulement")
        sMessPrivacyPublic=("Priv&eacute;s &amp; Publiques")
        sMessFileRecyclingFind=("Recyclage possible, copie en cours...")
        sMessFileRecyclingEnd=("Recyclage possible, copie termin&eacute;e...")
        sMessExit=("Une erreur a &eacute;t&eacute; d&eacute;tect&eacute;e ! Arr&ecirc;t du chargement via MySB !")
        sStep1=("Etape 1 sur 10 - Torrent charg&eacute; ! Proviens d&apos;un tracker ${sPrivacy}.")
        sStep2=("Etape 2 sur 10 - Trackers autoris&eacute;s...")
        sStep3=("Etape 3 sur 10 - Journalisation des infos du torrent...")
        sStep4=("Etape 4 sur 10 - Arr&ecirc;t temporaire du torrent pour v&eacute;rification des annonceurs...")
        sStep5=("Etape 5 sur 10 - R&eacute;f&eacute;rencement des annonceurs (HTTP, HTTPs, UDP et IPv6)...")
        sStep6=("Etape 6 sur 10 - D&eacute;sactivation des annonceurs IPv6...")
        sStep7=("Etape 7 sur 10 - Pr&eacute;paration des annonceurs HTTP, HTTPs et UDP &agrave; &ecirc;tre v&eacute;rifi&eacute;s et ajout&eacute;s...")
        case "${sFilesRecycling}" in
            1) sMess=("Copie simple") ;;
            2) sMess=("Lien dur") ;;
        esac
        sStep8=("Etape 8 sur 10 - Si activ&eacute;, utilisation du recyclage de fichiers (${sMess[*]})...")
        sStep9=("Etape 9 sur 10 - Sauvegarde du torrent et lancement du t&eacute;l&eacute;chargement...")
        sStep10=("Etape 10 sur 10 - Mise &agrave; jour du quota termin&eacute; ! Lancement de la v&eacute;rification des annonceurs, merci de patienter un moment ;-)")
        ;;
    "en")
        sMessPrivacyPrivate=("Privates only")
        sMessPrivacyPublic=("Privates &amp; Publics")
        sMessFileRecyclingFind=("Recycling possible, copy in progress...")
        sMessFileRecyclingEnd=("Recycling possible, copy completed...")
        sMessExit=("Error occured ! Stop loading via MySB !")
        sStep1=("Step 1 on 10 - Torrent loaded ! Come from ${sPrivacy} tracker.")
        sStep2=("Step 2 on 10 - Verification of authorized trackers...")
        sStep3=("Step 3 on 10 - Logging torrent info...")
        sStep4=("Step 4 on 10 - Temporary torrent stop for annoncers check...")
        sStep5=("Step 5 on 10 - Annoncers referencing (HTTP, HTTPs, UDP and IPv6)...")
        sStep6=("Step 6 on 10 - Disabling IPv6 annoncers...")
        sStep7=("Step 7 on 10 - Prepare for HTTP, HTTPs and UDP advertisers to be checked and added...")
        case "${sFilesRecycling}" in
            1) sMess=("Simple copy") ;;
            2) sMess=("Hard link") ;;
        esac
        sStep8=("Step 8 on 10 - If enabled, use file recycling (${sMess[*]})...")
        sStep9=("Step 9 on 10 - Saving the torrent and launching the download...")
        sStep10=("Step 10 on 10 - Quota update completed ! Launching the annoucers check, please wait a moment ;-)")
        ;;
esac

#### Functions - BoF
fnCopyFile() {
    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep8[*]} (${sMessFileRecyclingFind[*]})" >/dev/null 2>>"${sLogFile}"

    case "${sFilesRecycling}" in
        1) # Simple copy
            sCpParams=("-av")
            sOwners=("${sUserName}:${sUserName}")
            ;;
        2) # Hard link
            sCpParams=("-alv")
            sOwners=("${sUserName}:mysb_users")
            ;;
    esac

    if (sudo cp "${sCpParams[@]}" "${sTree}" "${sDirectory}"/); then
        sudo chown -Rv "${sOwners[@]}" "${sFinalDirectory}"
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.open "${sInfoHash}" >/dev/null 2>>"${sLogFile}"
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.check_hash "${sInfoHash}" >/dev/null 2>>"${sLogFile}"
        mysql "${sSqlParams[@]}" -e "UPDATE torrents SET state='completed', is_recycled='${sFilesRecycling}' WHERE info_hash='${sInfoHash}' AND users_ident='${sUserName}'" -v
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep8[*]} (${sMessFileRecyclingEnd[*]})" >/dev/null 2>>"${sLogFile}"
    fi
}
#### Functions - EoF

#### Step 1 - Add progress messages to torrent
sValue="$(mysql "${sSqlParams[@]}" -e "SELECT name FROM torrents WHERE info_hash='${sInfoHash}';")"
if [ -n "${sValue}" ]; then
    mysql "${sSqlParams[@]}" -e "UPDATE torrents SET privacy='${sPrivacy}', state='loaded', tree='${sFinalDirectory}', torrent='${sTorrentLoaded}' WHERE info_hash='${sInfoHash}' AND name='${sName}' AND users_ident='${sUserName}'" -v
else
    mysql "${sSqlParams[@]}" -e "INSERT INTO torrents (info_hash,name,privacy,state,tree,torrent,users_ident) VALUES ('${sInfoHash}', '${sName}', '${sPrivacy}', 'loaded', '${sFinalDirectory}', '${sTorrentLoaded}', '${sUserName}');" -v
fi
xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep1[*]}" 2>>"${sLogFile}"

#### Step 2 - Check if the tracker is allowed & annoncers cleaning
case "${sTrackerModeAllowed}" in
    "private")
        [ "${sPrivacy}" == "private" ] || nExit=6
        sMess=("${sMessPrivacyPrivate[*]}")
        ;;
    "public")
        sMess=("${sMessPrivacyPublic[*]}")
        ;;
    *) nExit=7 ;;
esac
xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep2[*]} (${sMess[*]})" 2>>"${sLogFile}"
[[ ${nExit} -gt 0 ]] && nContinue=0 || nContinue=1

#### Step 3 - Log header
xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep3[*]}" 2>>"${sLogFile}"
{
    echo "################################################################################"
    echo "Timestamp: ${dTimestamp}"
    echo "Name: ${sName}"
    echo "Hash: ${sInfoHash}"
    echo "Label: ${sLabel}"
    echo "Directory: ${sDirectory}"
    echo "Complete dest: ${sFinalDirectory}"
    case "${sFilesRecycling}" in
        0) sValue="Disabled" ;;
        1) sValue="Simple copy" ;;
        2) sValue="Hard link" ;;
    esac
    echo "File recycling: ${sValue}"
    echo "Annoncer check: ${bAnnoncersCheck}" | sed 's/0/NO/g;s/1/YES/g;'
    echo "Annoncer UDP: ${bAnnoncersUdp}" | sed 's/0/NO/g;s/1/YES/g;'
    echo "Tracker privacy: ${sPrivacy}"
    echo "Trackers allowed: ${sTrackerModeAllowed}"
    echo "Torrent loaded: ${sTorrentLoaded}"
    echo "Torrent dir: ${sTorrentDir}"
    echo "Torrent file: ${sTorrentFile}"
    echo "Torrent to start: ${isStart}" | sed 's/0/NO/g;s/1/YES/g;'
    echo "Torrent to save: ${saveTorrent}" | sed 's/0/NO/g;s/1/YES/g;'
    [[ ${nExit} -gt 0 ]] && echo "Error: ${nExit}" | sed 's/0/NO/g;s/1/YES/g;'
    echo "--------------"
} >>"${sLogFile}"

#### Step 4 - Close torrent from rTorrent queue
if [[ ${nExit} -eq 0 ]]; then
    {
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep4[*]}"
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.stop "${sInfoHash}"
    } 2>>"${sLogFile}"
else
    {
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sMessExit[*]}"
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.stop "${sInfoHash}"
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.close "${sInfoHash}"
    } 2>>"${sLogFile}"
fi

if [[ ${nContinue} -eq 1 ]]; then
    #### Step 5 - List & count annoncers
    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep5[*]}" 2>>"${sLogFile}"

    declare -A aAnnoncers
    aAnnoncersUdp=()
    aAnnoncersIpv=()
    aAnnoncersHttp=()
    aAnnoncersHttps=()
    nCountAnnoncers=0
    nId=0

    for sAnnoncer in $(transmission-show "${sTorrentLoaded}" | grep 'udp://\|http://\|https://' | grep -v 'Magnet URI\|Comment' | sed -e 's/ //g;'); do
        if (grep -q 'udp://' <<<"${sAnnoncer}"); then
            [[ ${bAnnoncersUdp} -eq 1 ]] && nEnable=1 || nEnable=0
            ((nCountAnnoncers++))
            aAnnoncersUdp+=("${sAnnoncer}")
            aAnnoncers[${nId}]="t${nId} ${nEnable}"
            echo "${sAnnoncer}" >>"${sLogFile}"
            ((nId++))
            continue
        elif (grep -q 'ipv6' <<<"${sAnnoncer}"); then
            ((nCountAnnoncers++))
            aAnnoncersIpv+=("${sAnnoncer}")
            aAnnoncers[${nId}]="t${nId} 0"
            echo "${sAnnoncer}" >>"${sLogFile}"
            ((nId++))
            continue
        elif (grep -q 'http://' <<<"${sAnnoncer}"); then
            ((nCountAnnoncers++))
            aAnnoncersHttp+=("${sAnnoncer}")
            aAnnoncers[${nId}]="t${nId} 1"
            echo "${sAnnoncer}" >>"${sLogFile}"
            ((nId++))
            continue
        elif (grep -q 'https://' <<<"${sAnnoncer}"); then
            ((nCountAnnoncers++))
            aAnnoncersHttps+=("${sAnnoncer}")
            aAnnoncers[${nId}]="t${nId} 1"
            echo "${sAnnoncer}" >>"${sLogFile}"
            ((nId++))
            continue
        else
            ((nId++))
        fi
    done
    {
        echo "There is ${nCountAnnoncers} announcer(s) in ${sTorrentLoaded}"
        echo "UDP: ${#aAnnoncersUdp[*]}"
        echo "IPv6: ${#aAnnoncersIpv[*]}"
        echo "HTTP: ${#aAnnoncersHttp[*]}"
        echo "HTTPs: ${#aAnnoncersHttps[*]}"
        echo "--------------"
    } >>"${sLogFile}"
    if [ "${nCountAnnoncers}" -eq 0 ]; then
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.close "${sInfoHash}" 2>>"${sLogFile}"
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.erase "${sInfoHash}" 2>>"${sLogFile}"
        nContinue=0
    fi
    nCountAnnoncers=$((nCountAnnoncers - ${#aAnnoncersIpv[@]}))
    [[ ${bAnnoncersUdp} -eq 0 ]] && nCountAnnoncers=$((nCountAnnoncers - ${#aAnnoncersUdp[@]}))

    #### Step 6 - Activate all announcers & disable IPv6
    if [[ ${nContinue} -eq 1 ]]; then
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep6[*]}" 2>>"${sLogFile}"
        bCleaned=0
        for ((i = 0; i < ${#aAnnoncers[@]}; i++)); do
            nId="$(echo "${aAnnoncers[${i}]}" | awk '{printf $1}')"
            bState="$(echo "${aAnnoncers[${i}]}" | awk '{printf $2}')"
            if [ "${bState}" -eq 0 ]; then
                xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} t.is_enabled.set "${sInfoHash}":"${nId}" "${bState}" 2>>"${sLogFile}"
                bCleaned=1
            else
                [[ ${bAnnoncersCheck} -eq 1 ]] && mysql "${sSqlParams[@]}" -e "INSERT INTO annoncers (scgi_port,info_hash,id,user) VALUES ('${nCgiPort}', '${sInfoHash}', '${nId}', '${sUserName}');" --verbose
            fi
        done
        if [ ${bCleaned} -eq 1 ]; then
            {
                echo "Cleaning annoncers completed !"
                echo "--------------"
            } >>"${sLogFile}"
        fi
    fi

    #### Step 7 - Prepare annoncers (UDP, HTTP & HTTPs) list for GetTrackersCert.bsh script
    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep7[*]}" 2>>"${sLogFile}"
    if [[ ${nContinue} -eq 1 ]] && [[ ${bAnnoncersCheck} -eq 1 ]]; then
        bExecute=0
        for sAnnoncer in "${aAnnoncersHttps[@]}"; do
            if [ -n "${sAnnoncer}" ]; then
                sProto="$(echo "${sAnnoncer}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')"
                [ -z "${sProto}" ] && sProto="https://"
                sShortAnnouncer="${sAnnoncer//${sProto}/}"
                sUrlUser="$(echo "${sShortAnnouncer}" | grep @ | cut -d@ -f1)"
                sShortAnnouncer=$(echo "${sShortAnnouncer//${sUrlUser}@/}" | cut -d/ -f1)
                echo "${nCountAnnoncers}|${sInfoHash}|${sPrivacy}|${nCgiPort}|${sShortAnnouncer}|${sAnnoncer}" >>"/home/.check_annoncers_${sUserName}"
                bExecute=1
                xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep7[*]} (${sAnnoncer})" 2>>"${sLogFile}"
            fi
        done
        for sAnnoncer in "${aAnnoncersHttp[@]}"; do
            if [ -n "${sAnnoncer}" ]; then
                sProto="$(echo "${sAnnoncer}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')"
                [ -z "${sProto}" ] && sProto="http://"
                sShortAnnouncer="${sAnnoncer//${sProto}/}"
                sUrlUser="$(echo "${sShortAnnouncer}" | grep @ | cut -d@ -f1)"
                sShortAnnouncer=$(echo "${sShortAnnouncer//${sUrlUser}@/}" | cut -d/ -f1)
                echo "${nCountAnnoncers}|${sInfoHash}|${sPrivacy}|${nCgiPort}|${sShortAnnouncer}|${sAnnoncer}" >>"/home/.check_annoncers_${sUserName}"
                bExecute=1
                xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep7[*]} (${sAnnoncer})" 2>>"${sLogFile}"
            fi
        done
        if [[ ${bAnnoncersUdp} -eq 1 ]]; then
            for sAnnoncer in "${aAnnoncersUdp[@]}"; do
                if [ -n "${sAnnoncer}" ]; then
                    sProto="$(echo "${sAnnoncer}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')"
                    [ -z "${sProto}" ] && sProto="udp://"
                    sShortAnnouncer="${sAnnoncer//${sProto}/}"
                    sUrlUser="$(echo "${sShortAnnouncer}" | grep @ | cut -d@ -f1)"
                    sShortAnnouncer=$(echo "${sShortAnnouncer//${sUrlUser}@/}" | cut -d/ -f1)
                    echo "${nCountAnnoncers}|${sInfoHash}|${sPrivacy}|${nCgiPort}|${sShortAnnouncer}|${sAnnoncer}" >>"/home/.check_annoncers_${sUserName}"
                    bExecute=1
                    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep7[*]} (${sAnnoncer})" 2>>"${sLogFile}"
                fi
            done
        fi
    fi

    #### Step 8 - Check if torrent already exist & copying duplicated files
    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep8[*]}" 2>>"${sLogFile}"
    if [[ ${nContinue} -eq 1 ]] && [[ ${sFilesRecycling} -gt 0 ]]; then
        for sTree in $(mysql "${sSqlParams[@]}" -e "SELECT tree FROM torrents WHERE info_hash='${sInfoHash}' AND name='${sName}' AND state='completed';"); do
            if [ -n "${sTree}" ]; then
                if [ -f "${sTree}" ] || [ -d "${sTree}" ]; then
                    # Tree in DB is the same that real
                    fnCopyFile >>"${sLogFile}"
                    sed -i '/^$/d' "${sLogFile}"
                    break
                else
                    {
                        # Not a validated file/directory, removing entry from database !
                        echo "Not a validated file/directory, removing entry from database !"
                        mysql "${sSqlParams[@]}" -e "DELETE FROM torrents WHERE info_hash='${sInfoHash}' AND name='${sName}' AND state='completed' AND tree='${sTree}';" -v
                    } >>"${sLogFile}"
                    sed -i '/^$/d' "${sLogFile}"
                fi
            else
                # We search the file with find
                sTree="$(find /home/*/rtorrent/ -name "${sName}" -print -quit)"
                if [ -n "${sTree}" ]; then
                    fnCopyFile >>"${sLogFile}"
                    sed -i '/^$/d' "${sLogFile}"
                fi
            fi
        done
    fi

    if [[ ${nContinue} -eq 1 ]]; then
        #### Step 9 - Copy back torrent loaded & start it
        if [[ ${saveTorrent} -eq 1 ]]; then
            xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep9[*]}" 2>>"${sLogFile}"
            {
                if [ "${sTorrentLoaded}" != "${sTorrentFile}" ]; then
                    echo -n "Moving torrent: "
                    if (! mv -f "${sTorrentLoaded}" "${sTorrentFile}"); then
                        echo "Failed to copy back '${sTorrentLoaded}' to '${sTorrentFile}' !"
                    else
                        echo "'${sTorrentLoaded}' --> '${sTorrentFile}' !"
                        mysql "${sSqlParams[@]}" -e "UPDATE torrents SET torrent='${sTorrentFile}' WHERE info_hash='${sInfoHash}' AND name='${sName}' AND users_ident='${sUserName}'" -v
                    fi
                fi
            } >>"${sLogFile}"
        else
            rm -fv "${sTorrentLoaded}" >>"${sLogFile}"
        fi
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.open "${sInfoHash}" 2>>"${sLogFile}"
        { [[ ${bAnnoncersCheck} -eq 0 ]] && [[ ${isStart} -eq 1 ]]; } && xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.start "${sInfoHash}" 2>>"${sLogFile}"
        [[ ${bAnnoncersCheck} -eq 0 ]] && xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} session.save "${sInfoHash}" 2>>"${sLogFile}"

        #### Step 10 - Quota update
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set "${sInfoHash}" "${sStep10[*]}" 2>>"${sLogFile}"
        sudo /bin/bash /home/"${sUserName}"/.rTorrent_tasks.sh 'quota'
    fi

    # Execute annoncers check if needed
    if [ -s "/home/.check_annoncers_${sUserName}" ] && [[ ${bExecute} -eq 1 ]]; then
        [ "${#sCpParams}" -gt 0 ] && touch "/tmp/GetTrackersCert_${sUserName}_${sInfoHash}.lock"
        sudo /bin/bash "/opt/MySB/scripts/GetTrackersCert.bsh" USER "${sUserName}" "${sInfoHash}" "${sCpParams[*]}" &
    fi

    # Force execute of finish script when a torrent recycling is present !
    if [ -f "/tmp/GetTrackersCert_${sUserName}_${sInfoHash}.lock" ] && [ -n "${sTree}" ]; then
        while [ -f "/tmp/GetTrackersCert_${sUserName}_${sInfoHash}.lock" ]; do
            sleep 1
        done
        /bin/bash "/home/${sUserName}/.rTorrent_finished.sh" "${sInfoHash}" "${sTree}" "${sDirectory}" "${sName}" "${sTorrentLoaded}" "${sLabel}" &
    fi
fi

#### On error OR torrent refused
if [[ ${nContinue} -eq 0 ]]; then
    #### Remove refused torrent file
    [ -n "${sTorrentFile}" ] && rm -fv "${sTorrentFile}" >>"${sLogFile}"
    #### Remove torrent from list
    { [ -n "${nCgiPort}" ] && [ -n "${sInfoHash}" ]; } && sudo /bin/bash /home/"${sUserName}"/.rTorrent_tasks.sh 'erase' ${nCgiPort} "${sInfoHash}" &
    #### Send mail to user
    curl --retry 3 --silent --show-error --data "username=${sUserName}&get_name=${sName}&get_loaded_file=${sTorrentLoaded}&privacy=${sPrivacy}&trackermodeallowed=${sTrackerModeAllowed}" http://localhost:8888/rTorrent >>"${sLogFile}"
fi
cat "${sLogFile}" >>"/home/${sUserName}/logs/${sScriptName//.rTorrent/rTorrent}.log"
rm -f "${sLogFile}"

##################### LAST LINE ######################################
