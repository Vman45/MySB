#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")/../inc/includes_before"
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Includes
# shellcheck source=inc/funcs_by_script/funcs_MySB_CreateUser
source "${MySB_InstallDir}/inc/funcs_by_script/funcs_MySB_CreateUser"

if [ "${USAGE}" == "ON" ]; then
    gfnListCountUsers 'all'
    LIST=""
    for User in ${gsUsersList}; do
        if [ "$User" != "${gsMainUserName}" ]; then
            LIST="$LIST|${CYELLOW}$User${CEND}"
        fi
    done

    if [ -n "$LIST" ]; then
        LIST="$(echo \("$LIST"\) | sed -e 's/^ //g;s/(|/(/g;')"
        echo -e "${Global_AvailableUsers} $LIST"
        echo -e "${Global_CancelUserChoice}"
    else
        echo -e "${DeleteUser_NoUser} $LIST"
        gfnEndingScript 0
    fi

    UserToDelete=""
    TEMP_UserToDelete=""
    while [ -z "${UserToDelete}" ] ||
        [ "${UserToDelete}" == "${gsMainUserName}" ] ||
        (! echo "${gsUsersList}" | grep -q ${UserToDelete}); do

        gfnQuestionGetString NO "${DeleteUser_TypeUser}" UserToDelete
        TEMP_UserToDelete="$(echo ${UserToDelete} | tr '[:lower:]' '[:upper:]')"

        if [ "$TEMP_UserToDelete" == "${Global_NO}" ]; then
            gfnEndingScript 0
        fi
    done
else
    UserToDelete=$1
fi

if [ -n "${UserToDelete}" ]; then
    #### renting
    gfnMonthlyPayment "${UserToDelete}"

    #### STOP services
    sServicesToStop="cron"
    [ -f /etc/init.d/rtorrent-"${UserToDelete}" ] && sServicesToStop="$sServicesToStop rtorrent-${UserToDelete}"
    gfnManageServices stop "$sServicesToStop"

    #### crontab
    log_daemon_msg "${DeleteUser_DeleteCron} [${UserToDelete}]"
    crontab -l >/tmp/crontab.tmp
    sed -i "/${UserToDelete}/d" /tmp/crontab.tmp
    crontab /tmp/crontab.tmp
    rm -f /tmp/crontab.tmp
    gfnStatusLSB

    #### FTP
    log_daemon_msg "${DeleteUser_DeleteFTP} [${UserToDelete}]"
    sed -i "/${UserToDelete}/d" /etc/vsftpd.chroot_list
    (df -H 2>/dev/null | grep -q "/home/${UserToDelete}/share") && umount /home/"${UserToDelete}"/share &>/dev/null
    (df -H 2>/dev/null | grep -q "/home/${UserToDelete}/rtorrent/torrents") && umount /home/"${UserToDelete}"/rtorrent/torrents &>/dev/null
    gfnStatusLSB 0

    #### NFS
    log_daemon_msg "${DeleteUser_DeleteNFS} [${UserToDelete}]"
    (mount -l 2>/dev/null | grep -q /export/"${UserToDelete}") && umount /export/"${UserToDelete}"
    [ -d /export/"${UserToDelete}" ] && rmdir /export/"${UserToDelete}"
    [ -f /etc/exports ] && sed -i "/${UserToDelete}/d" /etc/exports
    sed -i "/${UserToDelete}/d" /etc/fstab
    gfnStatusLSB

    #### Samba
    if [ "${UserAccountType}" == "normal" ]; then
        log_daemon_msg "${DeleteUser_DeleteSamba} [${UserToDelete}]"
        smbpasswd -x "${UserToDelete}" &>/dev/null
        gfnStatusLSB
    fi

    #### NginX - remove current password from htpassword
    log_daemon_msg "${DeleteUser_DeleteWebAccount} [${UserToDelete}]"
    htpasswd -D /etc/nginx/passwd/MySB "${UserToDelete}" &>/dev/null
    rm -f /etc/nginx/passwd/MySB_"${UserToDelete}"
    gfnStatusLSB

    #### NextCloud
    if [ "${gbIsInstalled_NextCloud}" == "YES" ]; then
        log_daemon_msg "${DeleteUser_DeleteNextCloudAccount} [${UserToDelete}]"
        su -s /bin/sh www-data -c "/usr/bin/php  ${gsNextCloudDir}/occ user:delete ${UserToDelete}" &>/dev/null
        rm -rf /home/nextcloud/"${UserToDelete}"
        gfnStatusLSB
    fi

    #### Minio
    log_daemon_msg "${DeleteUser_DeleteNextCloudAccount} [${UserToDelete}]"
    gfnMinioUsersBuckets delete "${UserToDelete}" &>/dev/null
    gfnStatusLSB

    #### remove files
    log_daemon_msg "${DeleteUser_RemoveFiles} [${UserToDelete}]"
    systemctl daemon-reload &>/dev/null
    systemctl disable rtorrent-"${UserToDelete}" &>/dev/null 2>&1
    updatedb
    locate "*${UserToDelete}*" >/tmp/"${UserToDelete}".list
    while read -r sLine; do
        if [ -d "${sLine}" ]; then
            rm -rf "${sLine}"
        elif [ -f "${sLine}" ]; then
            rm -f "${sLine}"
        fi
    done </tmp/"${UserToDelete}".list
    # rm -f /tmp/"${UserToDelete}".list
    # rm -f /etc/sudoers.d/"MySB_${UserToDelete}"
    # rm -f /etc/init.d/rtorrent-"${UserToDelete}"
    # rm -f /etc/nginx/rpc/"${UserToDelete}".conf
    # rm -f /etc/nginx/rpc/"${UserToDelete}".local
    # rm -f /etc/nginx/rpc/"${UserToDelete}".cakebox
    # rm -f /etc/nginx/upstream/rtorrent-"${UserToDelete}".conf
    # rm -f "${MySB_InstallDir}"/web/openvpn/openvpn_"${UserToDelete}".zip
    # rm -f "$gsCakeboxDir"/config/"${UserToDelete}".php
    # rm -f /etc/logrotate.d/rtorrent_"${UserToDelete}"
    # rm -f /home/.check_annoncers_"${UserToDelete}"
    # gfnDeleteDirectory 0 "${gsRutorrentDir}/conf/users/${UserToDelete}"
    # gfnDeleteDirectory 0 "${gsRutorrentDir}/share/users/${UserToDelete}"
    # gfnDeleteDirectory 0 "$gsManagerDir/conf/users/${UserToDelete}"
    gfnStatusLSB

    #### Remove user from database
    log_daemon_msg "${DeleteUser_RemoveFromDB}"
    # Get user id
    nUserID="$(cmdMySQL 'MySB_db' "SELECT id_users FROM users WHERE users_ident='${UserToDelete}';")"
    # Delete all in tracking_rent_payments
    cmdMySQL 'MySB_db' "DELETE FROM tracking_rent_payments WHERE id_users = '${nUserID}';"
    # Delete all in tracking_rent_status
    cmdMySQL 'MySB_db' "DELETE FROM tracking_rent_status WHERE id_users = '${nUserID}';"
    # Delete all in tracking_rent_history
    cmdMySQL 'MySB_db' "DELETE FROM tracking_rent_history WHERE id_users = '${nUserID}';"
    # Delete entry in users_history
    cmdMySQL 'MySB_db' "DELETE FROM users_history WHERE id_users = '${nUserID}';"
    # Delete entry in users
    cmdMySQL 'MySB_db' "DELETE FROM users WHERE users_ident = '${UserToDelete}';"
    gfnStatusLSB

    #### system user
    log_daemon_msg "${DeleteUser_SystemAccount} [${UserToDelete}]"
    userdel --remove --force "${UserToDelete}" &>/dev/null
    gfnDeleteDirectory 0 "/home/${UserToDelete}"
    gfnDeleteDirectory 0 "/var/run/screen/S-${UserToDelete}"
    gfnStatusLSB

    #### Postfix Alias
    log_daemon_msg "Postfix alias [${UserToDelete}]"
    (grep -q "${UserToDelete}" /etc/aliases) && sed -i "/${UserToDelete}/d" /etc/aliases
    newaliases
    gfnStatusLSB

    #### OpenVPN
    if [ "${gbIsInstalled_OpenVPN}" == "YES" ] && [ "${UserAccountType}" == "normal" ]; then
        log_daemon_msg "${DeleteUser_RevokeOpenVPN} [${UserToDelete}]"
        gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/OpenVPN" 'delete' "${UserToDelete}" 'SCREEN'
        gfnStatusLSB
    fi

    #### rtorrent max memory
    gfnListCountUsers 'normal'
    for User in ${gsUsersList}; do
        if [ "$User" != "${UserToDelete}" ]; then
            log_daemon_msg "${DeleteUser_PiecesMemory[*]} $User"
            Line=$(sed -n '/pieces.memory.max.set/=' /home/"$User"/.rtorrent.rc)
            sed -i "${Line}d" /home/"$User"/.rtorrent.rc
            sed -i "${Line}i\#pieces.memory.max.set = '$((((gsMemory / gnTotalUsers) * 1024) * 1024))'\n" /home/"$User"/.rtorrent.rc
            gfnStatusLSB
        fi
    done

    #### Quota
    gfnManageQuota "${DeleteUser_Quota}"

    #### Create new security rules
    log_daemon_msg "${DeleteUser_SecurituRules}"
    gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/bin/MySB_SecurityRules" 'refresh' '--users' 'SCREEN'
    gfnStatusLSB

    #### START services
    gfnManageServices start "cron nfs-kernel-server vsftpd smbd nginx"
else
    echo "User not defined !"
fi

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
