#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### VARs
sWhereRequest=("cert_expiration <= '$(date +%Y-%m-%d)' AND is_active = '1' AND is_ssl = '1'")

#### Create dir
if [ ! -d "${MySB_InstallDir}"/ssl/trackers/ ]; then
    mkdir "${MySB_InstallDir}"/ssl/trackers/
fi

case "${gsSwitch}" in
    'APPLYCONFIG')
        DoDeleteTracker=1
        if [ "${2}" == "FORCE" ]; then
            DoRenewCertificates=1
            sWhereRequest=("is_active = '1'")
        else
            DoRenewCertificates=0
        fi
        # DoCleanCertificates=1
        DoCheckAddedTorrents=0
        DoGetCertificates=1
        ;;
    'CRON')
        DoDeleteTracker=0
        DoRenewCertificates=1
        # DoCleanCertificates=1
        DoCheckAddedTorrents=0
        DoGetCertificates=1
        ;;
    'USER')
        DoDeleteTracker=0
        DoRenewCertificates=0
        # DoCleanCertificates=0
        DoCheckAddedTorrents=1
        DoGetCertificates=0
        ;;
    *) # "REFRESH" or "INSTALL"
        DoDeleteTracker=0
        DoRenewCertificates=1
        # DoCleanCertificates=1
        DoCheckAddedTorrents=0
        DoGetCertificates=0
        ;;
esac

#### Removing deleted trackers from the portal
if [[ ${DoDeleteTracker} -eq 1 ]]; then
    RemovedTrackersList="$(cmdMySQL 'MySB_db' "SELECT tracker FROM trackers_list WHERE to_delete = '1';")"
    for RemovedTracker in ${RemovedTrackersList}; do
        log_daemon_msg "${DeleteTracker} ${RemovedTracker}"
        rm -f "${MySB_InstallDir}"/ssl/trackers/*"${RemovedTracker}".pem
        cmdMySQL 'MySB_db' "DELETE FROM trackers_list WHERE tracker='${RemovedTracker}';"
        gfnStatusLSB
    done
fi

#### Renew expirated certificates
if [[ ${DoRenewCertificates} -eq 1 ]]; then
    DoGetCertificates=0
    ExpiratedTrackersList="$(cmdMySQL 'MySB_db' "SELECT tracker FROM trackers_list WHERE ${sWhereRequest[*]};")"
    for ExpiratedTracker in ${ExpiratedTrackersList}; do
        log_daemon_msg "${RenewCertificate} ${ExpiratedTracker}"
        # rm -f "${MySB_InstallDir}"/ssl/trackers/*${RemovedTracker}.pem
        DoGetCertificates=1
        cmdMySQL 'MySB_db' "UPDATE trackers_list SET is_ssl='0', to_check='1' WHERE tracker = '${ExpiratedTracker}';"
        gfnStatusLSB
    done
fi

# if [[ ${DoCleanCertificates} -eq 1 ]]; then
#     #### Create again certificates listing in system
#     log_daemon_msg "${CertificateRehash}"
#     c_rehash "${MySB_InstallDir}"/ssl/trackers/ &>/dev/null
#     c_rehash /etc/ssl/certs/ &>/dev/null
#     update-ca-certificates --fresh &>/dev/null
#     gfnStatusLSB

#     #### Clean certificates with bad links
#     log_daemon_msg "${CleanCertificatesBadLinks}"
#     LIST_CERTS=$(ls -la /etc/ssl/certs/ | awk '{ print $9 }')
#     for Cert in ${LIST_CERTS}; do
#         if [ -n "${Cert}" ] && [ "${Cert}" != "." ] && [ "${Cert}" != ".." ]; then
#             TARGET=$(ls -la "/etc/ssl/certs/${Cert}" | awk '{ print $11 }')
#             if [ ! -f "${TARGET}" ]; then
#                 rm -fv "/etc/ssl/certs/${Cert}"
#             fi
#             unset TARGET
#         fi
#     done
#     unset LIST_CERTS Cert
#     gfnStatusLSB
# fi

if [[ ${DoCheckAddedTorrents} -eq 1 ]] || [[ ${DoGetCertificates} -eq 1 ]]; then
    # Allow all trackers in BIND
    perl -pi -e "s/^include \"\/etc\/bind\/MySB.zones.blacklists\";/#include \"\/etc\/bind\/MySB.zones.blacklists\";/g" /etc/bind/named.conf.local
    [ -f /etc/dnscrypt-proxy/dnscrypt-proxy.toml ] && perl -pi -e "s/^  blacklist_file/  #blacklist_file/g" /etc/dnscrypt-proxy/dnscrypt-proxy.toml
    systemctl reload bind9.service
    [[ ${gbDnsCryptSwitch} -eq 1 ]] && systemctl restart dnscrypt-proxy.service
fi

#### Check added torrents
if [[ ${DoCheckAddedTorrents} -eq 1 ]]; then
    gfnCheckAddedTorrents "${sUser}" "${gsGivenHash}"
fi

#### Get certificates
if [[ ${DoGetCertificates} -eq 1 ]]; then
    gfnGetCertificates "${2}"
fi

if [[ ${DoCheckAddedTorrents} -eq 1 ]] || [[ ${DoGetCertificates} -eq 1 ]]; then
    # Block all inactive trackers in BIND
    # shellcheck source=inc/funcs_by_script/funcs_MySB_SecurityRules
    . "${MySB_InstallDir}"/inc/funcs_by_script/funcs_MySB_SecurityRules
    log_daemon_msg "${Global_Bind_BlockOut[*]}"
    gfnGenerateBlacklistsZone
    gfnStatusLSB 0

    log_daemon_msg "${Global_Bind_TrackersHosts[*]}"
    gfnCreateHostsFile
    gfnStatusLSB 0

    #### Reload services
    systemctl reload bind9.service
    if (gfnCheckCommand 0 /usr/local/bin/dnscrypt-proxy) && [[ ${gbDnsCryptSwitch} -eq 1 ]]; then
        systemctl restart dnscrypt-proxy.service
    fi
fi

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
